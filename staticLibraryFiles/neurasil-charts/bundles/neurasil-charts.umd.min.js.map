{"version":3,"sources":["ng://neurasil-charts/lib/models/NeurasilChartType.ts","ng://neurasil-charts/lib/neurasil-charts.service.ts","ng://neurasil-charts/lib/pipes/neurasil-data-filter/neurasil-data-filter.pipe.ts","ng://neurasil-charts/lib/neurasil-charts.component.ts","ng://neurasil-charts/lib/neurasil-charts-toolbar/neurasil-charts-toolbar.component.ts","ng://neurasil-charts/lib/neurasil-charts.module.ts"],"names":["NEURASIL_CHART_TYPE","BAR","BAR_LINE","STACKED","LINE","PIE","DONUT","GRID","HORIZONTAL_BAR","STACKED_PARETO","NeurasilChartsService","prototype","parseDataFromDatasource","chartType","incomingData","swapLabelsAndDatasets","returnData","_cornerstone","_formatObject","data","JSON","parse","stringify","k_arr","Object","keys","cDat","i","length","currKey","j","push","formatObj","k_arr_new","testItem","prefix","suffix","k","isNumber","substr","replace","cDat_New","index","indexOf","splice","value","isNaN","Number","toString","chartObjectBuilder","chartData","useAltAxis","title","yAxisLabelText","yAxisLabelText_Alt","xAxisLabelText","cornerstone","formatObject","console","warn","options","maintainAspectRatio","responsive","display","text","yAxisLabel","labelString","yAxisLabel_Alt","type","xAxisLabel","scales","xAxes","stacked","scaleLabel","yAxes","altAxisObj","id","ticks","beginAtZero","position","min","max","stepSize","tooltips","callbacks","label","tooltipItem","datasets","datasetIndex","xLabel","yLabel","key","labels","this","dataParser","getPalette","opacity","noOfColors","colors","diff","colorsLength","colorPalatte","bgColorPalatte","dataSets","objKeys","yAxis","dataSet","backgroundColor","borderColor","borderWidth","yAxisID","performParetoAnalysis","props","localSumArr","totalSum","sum","val","parseFloat","newArr","o","sort","a","b","newLabelsArray","sortedlocalSumArr","rollingSum","paretoLineValues","eightyPercentLine","paretoVal","Math","floor","Injectable","args","providedIn","NeurasilDataFilter","transform","filterText","filterTerms","split","includeTerms_1","excludeTerms_1","includeColumns","excludeColumns","undefined","term","trim","toLowerCase","data_Filtered","filter","dataItem","searchString","currentPassingStatus","includes","window","alert","h","processedKey","keepColumn","Pipe","name","pure","NeurasilChartsComponent","neurasilChartsService","neurasilDataFilter","showToolbar","showToolbarChange","EventEmitter","chartTypeChange","chartTitle","swapLabelsAndDatasetsChange","globalFilter","toolbarProps","_datasetFilter","ngOnInit","hasData","ngAfterViewInit","drawChart","ngOnChanges","changes","log","updateToolbarProps","ev","emit","_canvas","destroy","canvas","ctx","nativeElement","getContext","filterString","filteredData","Chart","Component","selector","template","providers","ViewChild","static","Input","Output","NeurasilChartsToolbarComponent","toolbarPropsChange","toolbarPropsChanged","NeurasilChartsModule","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["export enum NEURASIL_CHART_TYPE {\r\n    BAR = 0,\r\n    BAR_LINE = 1,\r\n    STACKED = 2,\r\n    LINE = 3,\r\n    PIE = 4,\r\n    DONUT = 5,\r\n    GRID = 6,\r\n    HORIZONTAL_BAR = 7,\r\n    STACKED_PARETO = 9\r\n}","import { Injectable } from '@angular/core';\nimport { NEURASIL_CHART_TYPE } from './models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NeurasilChartsService {\n\n  constructor() { }\n\n\n  parseDataFromDatasource(chartType: NEURASIL_CHART_TYPE, incomingData: Array<any>, swapLabelsAndDatasets: boolean): { _cornerstone: string, _formatObject: { prefix: string, suffix: string }, data: Array<any> } {\n    let returnData = {\n      _cornerstone: \"\",\n      _formatObject: null,\n      data: null\n    }\n\n    let data = JSON.parse(JSON.stringify(incomingData)); // make a copy of the data\n\n    let k_arr_Temp = Object.keys(data[0]);\n\n\n    let k_arr = Object.keys(data[0]);\n    let cDat = {};\n    for (let i = 0; i < k_arr.length; i++) {\n      let currKey = k_arr[i]\n      cDat[currKey] = [];\n      for (var j in data) {\n        cDat[k_arr[i]].push(data[j][currKey]);\n      }\n    }\n\n\n    let formatObj = {};\n    let k_arr_new = Object.keys(cDat);\n    returnData._cornerstone = k_arr_new[0];\n\n    for (let i = 0; i < k_arr_new.length; i++) { // for each key in formatted object\n      let currKey = k_arr_new[i];\n      formatObj[currKey] = {};\n      if (currKey != returnData._cornerstone) {\n        let testItem;\n        for (var j in cDat[currKey]) {\n          if (cDat[currKey][j]) { // set test item and break if the value is not null\n            testItem = cDat[currKey][j];\n            break;\n          }\n        }\n\n        let prefix = \"\";\n        let suffix = \"\";\n        if (testItem) {\n          if (!isNumber(testItem)) {\n            if (isNumber(testItem.substr(1))) {\n              prefix = testItem.substr(0, 1);\n\n            } else if (isNumber(testItem.substr(0, testItem.length - 1))) {\n              suffix = testItem.substr(testItem.length - 1);\n            }\n          }\n        }\n\n        formatObj[currKey] = {\n          prefix: prefix,\n          suffix: suffix\n        }\n\n        // format each data in the individual arrays\n        for (var k in cDat[currKey]) {\n          if (prefix != \"\") {\n            cDat[currKey][k] = cDat[currKey][k].replace(prefix, \"\");\n          }\n          if (suffix != \"\") {\n            cDat[currKey][k] = cDat[currKey][k].replace(suffix, \"\");\n          }\n\n          //newStr = cDat\n          //replaceData.push()\n        }\n\n      } else if (currKey == returnData._cornerstone) {\n        formatObj[currKey] = {\n          prefix: \"\",\n          suffix: \"\"\n        }\n      }\n\n    }\n\n\n    if (!swapLabelsAndDatasets) {\n      // do nothing;\n      // return cDat;\n    }\n    else {\n      let cDat_New = {};\n\n      cDat_New[returnData._cornerstone] = Object.keys(cDat);\n      let index = cDat_New[returnData._cornerstone].indexOf(returnData._cornerstone);\n      if (index > -1) {\n        cDat_New[returnData._cornerstone].splice(index, 1);\n      }\n      for (let i = 0; i < cDat[returnData._cornerstone].length; i++) {\n        cDat_New[cDat[returnData._cornerstone][i]] = [];\n        for (var j in cDat_New[returnData._cornerstone]) {\n          cDat_New[cDat[returnData._cornerstone][i]].push(cDat[cDat_New[returnData._cornerstone][j]][i])\n        }\n      }\n      //return cDat_New;\n      cDat = cDat_New; // reassign to cDat\n    }\n\n\n    if (chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\n      // Add suffixes to auto-generated lines\n      formatObj[\"Pareto\"] = {\n        prefix: \"\",\n        suffix: \"%\"\n      }\n      formatObj[\"80% line\"] = {\n        prefix: \"\",\n        suffix: \"%\"\n      }\n    }\n\n    function isNumber(value: string | number): boolean {\n      return ((value != null) && !isNaN(Number(value.toString())));\n    }\n\n    returnData._formatObject = formatObj;\n    returnData.data = cDat;\n    //console.log(cDat);\n    return returnData;\n  }\n\n\n  chartObjectBuilder(chartType, chartData, useAltAxis, title, yAxisLabelText, yAxisLabelText_Alt, xAxisLabelText, cornerstone, swapLabelsAndDatasets, formatObject) {\n    //const chartTypes = NexusChartjsChart.chartTypes;\n    if ((chartType == NEURASIL_CHART_TYPE.BAR || chartType == NEURASIL_CHART_TYPE.HORIZONTAL_BAR || chartType == NEURASIL_CHART_TYPE.LINE || chartType == NEURASIL_CHART_TYPE.STACKED || chartType == NEURASIL_CHART_TYPE.PIE || chartType == NEURASIL_CHART_TYPE.DONUT) && useAltAxis == true) {\n      console.warn(\"You have enabled alternate axis on a (unsupported) chart type. It has been set to false\");\n      useAltAxis = false;\n    }\n\n    if (chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\n      yAxisLabelText_Alt = \"Pareto %\";\n    }\n\n    let options: any = {\n      maintainAspectRatio: false,\n      responsive: true,\n    };\n    if (title) {\n      options.title = {\n        display: true,\n        text: title\n      }\n    }\n\n    let yAxisLabel = { display: false, labelString: \"\" }\n    if (yAxisLabelText) {\n      yAxisLabel.display = true;\n      yAxisLabel.labelString = yAxisLabelText;\n    }\n\n    let yAxisLabel_Alt = { display: false, labelString: \"\" }\n    if (yAxisLabelText_Alt) {\n      yAxisLabel_Alt.display = true;\n      yAxisLabel_Alt.labelString = yAxisLabelText_Alt;\n    }\n\n    let xAxisLabel = { display: false, labelString: \"\" };\n    if (xAxisLabelText) {\n      xAxisLabel.display = true;\n      xAxisLabel.labelString = xAxisLabelText;\n    }\n\n    if (chartType != NEURASIL_CHART_TYPE.PIE && chartType != NEURASIL_CHART_TYPE.DONUT) {\n      if (chartType == NEURASIL_CHART_TYPE.STACKED || chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\n\n        options.scales = {\n          xAxes: [{\n            stacked: true,\n            scaleLabel: xAxisLabel\n          }],\n          yAxes: [{\n            stacked: true,\n            scaleLabel: yAxisLabel\n          }]\n        }\n\n        if (chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\n          let altAxisObj: any = {\n            id: 'yAxis-alt',\n            display: 'auto',\n            ticks: {\n              beginAtZero: true,\n            },\n            position: 'right',\n            scaleLabel: yAxisLabel_Alt\n          }\n          altAxisObj.ticks.min = 0;\n          altAxisObj.ticks.max = 100;\n          altAxisObj.ticks.stepSize = 80\n\n          options.scales.yAxes.push(altAxisObj)\n\n        }\n\n      } else {\n        options.scales = {\n          xAxes: [{\n            scaleLabel: xAxisLabel\n          }],\n          yAxes: [{\n            id: 'yAxis',\n            ticks: {\n              beginAtZero: true,\n            },\n            scaleLabel: yAxisLabel\n          },]\n        }\n\n        if (useAltAxis) {\n          let altAxisObj: any = {\n            id: 'yAxis-alt',\n            display: 'auto',\n            ticks: {\n              beginAtZero: true,\n            },\n            position: 'right',\n            scaleLabel: yAxisLabel_Alt\n          }\n          if (chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\n            altAxisObj.ticks.min = 0;\n            altAxisObj.ticks.max = 100;\n            altAxisObj.ticks.stepSize = 80\n          }\n          options.scales.yAxes.push(altAxisObj)\n\n        }\n      }\n    }\n\n    let type;\n    if (chartType == NEURASIL_CHART_TYPE.LINE) {\n      type = 'line'\n    } else if (chartType == NEURASIL_CHART_TYPE.BAR ||\n      chartType == NEURASIL_CHART_TYPE.BAR_LINE ||\n      chartType == NEURASIL_CHART_TYPE.STACKED ||\n      chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\n      type = 'bar'\n    } else if (chartType == NEURASIL_CHART_TYPE.HORIZONTAL_BAR) {\n      type = 'horizontalBar'\n    } else if (chartType == NEURASIL_CHART_TYPE.PIE) {\n      type = 'pie'\n    }\n    else if (chartType == NEURASIL_CHART_TYPE.DONUT) {\n      type = 'doughnut'\n    }\n\n\n    let THIS = this;\n\n    // tooltip & title prefix/suffix addition. Title uses default configs for bar /line\n    options.tooltips = {};\n    options.tooltips.callbacks = {};\n\n    if (chartType == NEURASIL_CHART_TYPE.BAR ||\n      chartType == NEURASIL_CHART_TYPE.BAR_LINE ||\n      chartType == NEURASIL_CHART_TYPE.LINE ||\n      chartType == NEURASIL_CHART_TYPE.STACKED ||\n      chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\n      options.tooltips.callbacks.label = function (tooltipItem, data) {\n        var label = data.datasets[tooltipItem.datasetIndex].label || '';\n        if (label) {\n          label += ': ';\n        }\n        if (swapLabelsAndDatasets) {\n          label += `${formatObject[tooltipItem.xLabel].prefix}` + tooltipItem.yLabel + `${formatObject[tooltipItem.xLabel].suffix}`;\n        } else {\n\n          let objKeys = Object.keys(formatObject);\n          let key = objKeys[tooltipItem.datasetIndex + 1]\n          let formatObj = formatObject[key];\n          label += `${formatObj.prefix}` + tooltipItem.yLabel + `${formatObj.suffix}`;;\n        }\n        return label;\n      }\n    } else if (chartType == NEURASIL_CHART_TYPE.PIE || chartType == NEURASIL_CHART_TYPE.DONUT) {\n      options.tooltips.callbacks.label = function (tooltipItem, data) {\n        var label = data.labels[tooltipItem.index];\n        if (label) {\n          label += ': ';\n        }\n        let formatObj;\n        if (swapLabelsAndDatasets) {\n          formatObj = formatObject[data.labels[tooltipItem.index]];\n\n        } else {\n          formatObj = formatObject[data.datasets[tooltipItem.datasetIndex].label];\n\n        }\n        label += `${formatObj.prefix}${data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]}${formatObj.suffix}`;\n        return label;\n      }\n      options.tooltips.callbacks.title = function (tooltipItem, data) {\n        return data.datasets[tooltipItem[0].datasetIndex].label;\n      }\n    } else if (chartType == NEURASIL_CHART_TYPE.HORIZONTAL_BAR) {\n      options.tooltips.callbacks.label = function (tooltipItem, data) {\n\n        var label = data.datasets[tooltipItem.datasetIndex].label;\n        if (label) {\n          label += ': ';\n        }\n        let formatObj;\n        if (swapLabelsAndDatasets) {\n          formatObj = formatObject[data.labels[tooltipItem.index]];\n\n        } else {\n          formatObj = formatObject[data.datasets[tooltipItem.datasetIndex].label];\n\n        }\n        label += `${formatObj.prefix}${data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]}${formatObj.suffix}`;\n        return label;\n      }\n      options.tooltips.callbacks.title = function (tooltipItem, data) {\n\n        return tooltipItem[0].yLabel;\n      }\n    }\n\n\n    let returnOpts = {\n      type: type,\n      data: this.dataParser(chartData, useAltAxis, chartType, cornerstone, swapLabelsAndDatasets),\n      options: options\n    }\n    return returnOpts;\n  }\n\n  dataParser(chartData, useAltAxis /*boolean*/, chartType /*chartType enum*/, cornerstone, swapLabelsAndDatasets) {\n\n    // helper function to get color array for chart. cycles through when \n    function getPalette(opacity, noOfColors) {\n      let colors = [\n        `rgba(199,233,180,${opacity})`,\n        `rgba(127,205,187,${opacity})`,\n        `rgba(65,182,196,${opacity})`,\n        `rgba(29,145,192,${opacity})`,\n        `rgba(34,94,168,${opacity})`,\n        `rgba(37,52,148,${opacity})`,\n        `rgba(8,29,88,${opacity})`,\n        `rgba(254,178,76,${opacity})`,\n        `rgba(253,141,60,${opacity})`,\n        `rgba(252,78,42,${opacity})`,\n        `rgba(227,26,28,${opacity})`,\n        `rgba(189,0,38,${opacity})`,\n        `rgba(128,0,38,${opacity})`\n      ];\n\n      if (noOfColors > colors.length) { // if more colors are required than available, cycle through beginning again\n        let diff = noOfColors - colors.length;\n        let colorsLength = colors.length;\n        for (var i = 0; i <= diff; i) { // NO INCREMENT HERE\n          for (var j = 0; j < colorsLength; j++) {\n            colors.push(colors[j])\n            i++; // INCREMENT HERE\n          }\n        }\n      }\n\n      return colors;\n    }\n\n    let colorPalatte;\n    let bgColorPalatte\n    if (!swapLabelsAndDatasets) {\n      colorPalatte = getPalette(1, chartData[cornerstone].length)\n      bgColorPalatte = getPalette(0.3, chartData[cornerstone].length)\n    } else {\n      colorPalatte = getPalette(1, Object.keys(chartData).length)\n      bgColorPalatte = getPalette(0.3, Object.keys(chartData).length)\n    }\n\n\n\n    let dataSets = [];\n    let objKeys = Object.keys(chartData);\n    let index = objKeys.indexOf(cornerstone);\n    if (index > -1) {\n      objKeys.splice(index, 1);\n    }\n\n\n    for (let i = 0; i < objKeys.length; i++) {\n\n      let yAxis = 'yAxis';\n      if (useAltAxis) {\n        if (i > 0) {\n          yAxis += '-alt';\n        }\n      }\n\n      let dataSet: any = {\n        label: objKeys[i],\n        data: chartData[objKeys[i]],\n        backgroundColor: bgColorPalatte[i],\n        borderColor: colorPalatte[i],\n        borderWidth: 2\n      };\n\n\n      if (chartType == NEURASIL_CHART_TYPE.BAR_LINE) { // ignores stacked and bar options. Makes assumption that only 1st dataset is bar\n        if (i == 0) {\n          dataSet.type = 'bar';\n        } else {\n          dataSet.type = 'line';\n        }\n      }\n\n\n\n\n      if (chartType == NEURASIL_CHART_TYPE.BAR || chartType == NEURASIL_CHART_TYPE.HORIZONTAL_BAR || chartType == NEURASIL_CHART_TYPE.STACKED || chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\n        dataSet.backgroundColor = bgColorPalatte[i];\n        dataSet.borderColor = colorPalatte[i];\n      } else if (chartType == NEURASIL_CHART_TYPE.BAR_LINE || chartType == NEURASIL_CHART_TYPE.LINE) {\n        if (dataSet.type == 'bar') {\n          dataSet.backgroundColor = bgColorPalatte[i];\n          dataSet.borderColor = colorPalatte[i];\n        } else {\n          dataSet.borderColor = colorPalatte[i];\n          dataSet.backgroundColor = 'rgba(0,0,0,0)';\n        }\n      } else if (chartType == NEURASIL_CHART_TYPE.PIE || chartType == NEURASIL_CHART_TYPE.DONUT) {// overwrite single color assignment to array.\n        dataSet.backgroundColor = bgColorPalatte;\n        dataSet.borderColor = colorPalatte;\n      }\n\n\n      if (chartType != NEURASIL_CHART_TYPE.PIE && chartType != NEURASIL_CHART_TYPE.DONUT) {\n        if (chartType != NEURASIL_CHART_TYPE.STACKED && chartType != NEURASIL_CHART_TYPE.STACKED_PARETO) {\n          dataSet.yAxisID = yAxis;\n        }\n      }\n\n      dataSets.push(dataSet);\n    }\n    let returnData = {\n      labels: chartData[cornerstone],\n      datasets: dataSets\n    }\n    return returnData;\n  }\n\n  performParetoAnalysis(props){\n    //modify chart object\n    let localSumArr = [];\n    let totalSum = 0;\n    for (let j = 0; j < props.data.datasets[0].data.length; j++) {\n      let sum = 0;\n      for (let i = 0; i < props.data.datasets.length; i++) {\n        let val = parseFloat(props.data.datasets[i].data[j]);\n        if (isNaN(val)) {\n          val = 0;\n        }\n        sum += val\n      }\n      localSumArr.push(sum);\n      totalSum += sum;\n    }\n\n    //sort data by local sum\n    let newArr = [];\n    for (let i = 0; i < localSumArr.length; i++) {\n      let o = {\n        sum: localSumArr[i],\n        labels: props.data.labels[i],\n      }\n      for (let j = 0; j < props.data.datasets.length; j++) {\n        o[j] = props.data.datasets[j].data[i];\n      }\n      newArr.push(o)\n    }\n\n    //sort descending\n    newArr.sort(function (a, b) {\n      return ((a.sum < b.sum) ? 1 : ((a.sum == b.sum) ? 0 : -1));\n    });\n\n    //rebuild and reassign labels array\n    let newLabelsArray = []\n    for (let i =0; i < newArr.length; i++){\n      newLabelsArray.push(newArr[i][\"labels\"]);\n    }\n    props.data.labels = newLabelsArray;\n\n    //rebuild and reassign data array for each dataset\n\n    for (let j = 0; j < props.data.datasets.length; j++) {\n      let data = [];\n      for (let i = 0; i < newArr.length; i++){\n        data.push(newArr[i][j])\n      }\n      props.data.datasets[j].data = data;\n    }\n\n    let sortedlocalSumArr = [];\n    for (let i = 0 ; i < newArr.length; i++){\n      sortedlocalSumArr.push(newArr[i].sum)\n    }\n\n\n    // calculate and push pareto line, also populate 80%line array\n    let rollingSum = 0;\n    let paretoLineValues = [];\n    let eightyPercentLine = [];\n\n    for (let i = 0 ; i < sortedlocalSumArr.length; i++){\n      rollingSum += sortedlocalSumArr[i];\n      let paretoVal = rollingSum/totalSum * 100;\n      paretoLineValues.push( Math.floor(paretoVal * 100) / 100 );\n      eightyPercentLine.push(80)\n    }\n    props.data.datasets.push({\n      \"label\":\"Pareto\",\n      \"data\":paretoLineValues,\n      \"backgroundColor\":\"rgba(0,0,0,0)\",\n      \"borderColor\":\"rgba(0,0,0,0.8)\",\n      \"borderWidth\":2,\n      \"type\":\"line\",\n      \"yAxisID\":\"yAxis-alt\"\n    })\n    // push 80% line\n    props.data.datasets.push({\n      \"label\":\"80% line\",\n      \"data\":eightyPercentLine,\n      \"backgroundColor\":\"rgba(0,0,0,0)\",\n      \"borderColor\":\"rgba(0,0,0,0.8)\",\n      \"borderWidth\":2,\n      \"type\":\"line\",\n      \"yAxisID\":\"yAxis-alt\"\n    })\n  }\n\n    // unused. Migrated code to NeurasilDataFilterPipe\n  // filterData(data: Array<any>, datasetFilter: string) {\n\n  //   if (datasetFilter) {\n  //     let filterTerms = datasetFilter.split(',');\n  //     let includeTerms = [];\n  //     let excludeTerms = [];\n  //     let includeColumns = [];\n  //     let excludeColumns = [];\n  //     for (let i in filterTerms) {\n  //       if (filterTerms[i] != null && filterTerms[i] != undefined && filterTerms[i].length > 1) {\n  //         let term = filterTerms[i].trim().toLowerCase();\n  //         if (term[0] == \"-\") {\n  //           excludeTerms.push(term.replace(\"-\", \"\").trim());\n  //         } else if (term[0] == \"~\") {\n  //           if (term[1] == \"!\") {\n  //             excludeColumns.push(term.replace(\"~!\", \"\").trim());\n  //           } else {\n  //             includeColumns.push(term.replace(\"~\", \"\").trim())\n  //           }\n  //         } else {\n  //           includeTerms.push(term.trim())\n  //         }\n  //       }\n  //     }\n\n\n  //     let data_Filtered = data.filter(function (dataItem) {\n  //       let k_arr = Object.keys(dataItem);\n  //       let searchString = \"\";\n  //       for (let i in k_arr) {\n  //         let currKey = k_arr[i];\n  //         let value = dataItem[currKey];\n  //         searchString += value + \" \";\n  //       }\n  //       searchString = searchString.toLowerCase().trim();\n  //       let currentPassingStatus = false;\n  //       if (includeTerms.length > 0) {\n  //         for (let i in includeTerms) {\n  //           if (searchString.includes(includeTerms[i])) {\n  //             currentPassingStatus = true;\n  //             break;\n  //           }\n  //         }\n  //       } else {\n  //         currentPassingStatus = true;\n  //       }\n  //       if (excludeTerms.length > 0 && currentPassingStatus) {\n  //         for (let i in excludeTerms) {\n  //           if (searchString.includes(excludeTerms[i])) {\n  //             currentPassingStatus = false;\n  //             break;\n  //           }\n  //         }\n  //       }\n  //       if (currentPassingStatus) {\n\n  //         return dataItem;\n  //       }\n  //     });\n\n  //     if (includeColumns.length > 0 && excludeColumns.length > 0) {\n  //       window.alert(\"Unsupported usage of include & exclude columns. Things may break\")\n  //     }\n  //     //after filtering is complete, remove columns from clone of data\n  //     else if (excludeColumns.length > 0) {\n  //       data_Filtered = JSON.parse(JSON.stringify(data_Filtered))\n  //       //console.log(\"here\")\n  //       for (var h in data_Filtered) {\n  //         let dataItem = data_Filtered[h];\n  //         let k_arr = Object.keys(dataItem);\n  //         //for (let i in k_arr) {\n  //         for (let i = 0; i < k_arr.length; i++) {\n  //           if (i > 0) {// skip the first column. Do not allow user to delete first column\n  //             for (var j in excludeColumns) {\n  //               let processedKey = k_arr[i].trim().toLowerCase();\n  //               if (processedKey.includes(excludeColumns[j])) {\n  //                 delete dataItem[k_arr[i]];\n  //               }\n  //             }\n  //           }\n  //         }\n  //       }\n  //     }\n\n  //     else if (includeColumns.length > 0) {\n  //       data_Filtered = JSON.parse(JSON.stringify(data_Filtered));\n  //       for (var h in data_Filtered) {\n  //         let dataItem = data_Filtered[h];\n  //         let k_arr = Object.keys(dataItem);\n  //         for (let i = 0; i < k_arr.length; i++) {\n  //           if (i > 0) {// skip the first column. Needed?\n  //             let processedKey = k_arr[i].trim().toLowerCase();\n  //             let keepColumn = false;\n  //             for (var j in includeColumns) {\n  //               if (processedKey.includes(includeColumns[j])) {\n  //                 keepColumn = true;\n  //               }\n  //               // if (!processedKey.includes(includeColumns[j])) {\n  //               //     delete dataItem[k_arr[i]];\n  //               // }\n  //             }\n  //             if (!keepColumn) {\n  //               delete dataItem[k_arr[i]];\n  //             }\n  //           }\n  //         }\n  //       }\n  //     }\n\n  //     return data_Filtered;\n  //   }\n  //   return data; // if no filter, return original data\n  // }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'neurasilDataFilter',\n  pure: true\n})\nexport class NeurasilDataFilter implements PipeTransform {\n\n  transform(data: any[], filterText: string): any {\n    if (filterText === \"\" || filterText === null || filterText === undefined) {\n      return data;\n    } else {\n      if (filterText) {\n        let filterTerms = filterText.split(',');\n        let includeTerms = [];\n        let excludeTerms = [];\n        let includeColumns = [];\n        let excludeColumns = [];\n        for (let i in filterTerms) {\n          if (filterTerms[i] != null && filterTerms[i] != undefined && filterTerms[i].length > 1) {\n            let term = filterTerms[i].trim().toLowerCase();\n            if (term[0] == \"-\") {\n              excludeTerms.push(term.replace(\"-\", \"\").trim());\n            } else if (term[0] == \"~\") {\n              if (term[1] == \"!\") {\n                excludeColumns.push(term.replace(\"~!\", \"\").trim());\n              } else {\n                includeColumns.push(term.replace(\"~\", \"\").trim())\n              }\n            } else {\n              includeTerms.push(term.trim())\n            }\n          }\n        }\n\n\n        let data_Filtered = data.filter(function (dataItem) {\n          let k_arr = Object.keys(dataItem);\n          let searchString = \"\";\n          for (let i in k_arr) {\n            let currKey = k_arr[i];\n            let value = dataItem[currKey];\n            searchString += value + \" \";\n          }\n          searchString = searchString.toLowerCase().trim();\n          let currentPassingStatus = false;\n          if (includeTerms.length > 0) {\n            for (let i in includeTerms) {\n              if (searchString.includes(includeTerms[i])) {\n                currentPassingStatus = true;\n                break;\n              }\n            }\n          } else {\n            currentPassingStatus = true;\n          }\n          if (excludeTerms.length > 0 && currentPassingStatus) {\n            for (let i in excludeTerms) {\n              if (searchString.includes(excludeTerms[i])) {\n                currentPassingStatus = false;\n                break;\n              }\n            }\n          }\n          if (currentPassingStatus) {\n\n            return dataItem;\n          }\n        });\n\n        if (includeColumns.length > 0 && excludeColumns.length > 0) {\n          window.alert(\"Unsupported usage of include & exclude columns. Things may break\")\n        }\n        //after filtering is complete, remove columns from clone of data\n        else if (excludeColumns.length > 0) {\n          data_Filtered = JSON.parse(JSON.stringify(data_Filtered))\n          //console.log(\"here\")\n          for (var h in data_Filtered) {\n            let dataItem = data_Filtered[h];\n            let k_arr = Object.keys(dataItem);\n            //for (let i in k_arr) {\n            for (let i = 0; i < k_arr.length; i++) {\n              if (i > 0) {// skip the first column. Do not allow user to delete first column\n                for (var j in excludeColumns) {\n                  let processedKey = k_arr[i].trim().toLowerCase();\n                  if (processedKey.includes(excludeColumns[j])) {\n                    delete dataItem[k_arr[i]];\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        else if (includeColumns.length > 0) {\n          data_Filtered = JSON.parse(JSON.stringify(data_Filtered));\n          for (var h in data_Filtered) {\n            let dataItem = data_Filtered[h];\n            let k_arr = Object.keys(dataItem);\n            for (let i = 0; i < k_arr.length; i++) {\n              if (i > 0) {// skip the first column. Needed?\n                let processedKey = k_arr[i].trim().toLowerCase();\n                let keepColumn = false;\n                for (var j in includeColumns) {\n                  if (processedKey.includes(includeColumns[j])) {\n                    keepColumn = true;\n                  }\n                  // if (!processedKey.includes(includeColumns[j])) {\n                  //     delete dataItem[k_arr[i]];\n                  // }\n                }\n                if (!keepColumn) {\n                  delete dataItem[k_arr[i]];\n                }\n              }\n            }\n          }\n        }\n\n        return data_Filtered;\n      }\n      return data; // if no filter, return original data\n    }\n  }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { NeurasilChartsService } from './neurasil-charts.service';\nimport { NEURASIL_CHART_TYPE } from './models';\nimport { NeurasilDataFilter } from './pipes';\n\nimport * as Chart from 'chart.js';\n\n@Component({\n  selector: 'neurasil-charts',\n  templateUrl: './neurasil-charts.component.html',\n  styleUrls: ['./neurasil-charts.component.sass'],\n  providers: [NeurasilDataFilter]\n})\nexport class NeurasilChartsComponent implements OnInit, AfterViewInit, OnChanges {\n\n  @ViewChild('neurasilChartCanvas', { static: false }) canvas: ElementRef;\n\n  /**\n   * Data to plot\n   */\n  @Input() data: Array<any>;\n\n  @Input() showToolbar: boolean = true;\n  @Output() showToolbarChange = new EventEmitter();\n  /**\n   * User-defined default chart type\n   */\n  @Input() chartType: NEURASIL_CHART_TYPE;\n  @Output() chartTypeChange = new EventEmitter();\n\n  @Input() useAltAxis: boolean = true; // not sure if needed\n  @Input() chartTitle: string = \"\";\n  @Input() xAxisLabelText: string = \"\";\n  @Input() yAxisLabelText_Alt: string = \"\";\n  @Input() yAxisLabelText: string = \"\";\n\n  @Input() swapLabelsAndDatasets: boolean;\n  @Output() swapLabelsAndDatasetsChange = new EventEmitter();\n  @Input() globalFilter: string = \"\";\n\n  toolbarProps = {\n    chartType: this.chartType ? this.chartType : NEURASIL_CHART_TYPE.BAR,\n    _datasetFilter: \"\",\n    swapLabelsAndDatasets: false\n  };\n\n  _canvas: any;\n  hasData: boolean; // for the purpose of checking length in html template\n\n\n  constructor(public neurasilChartsService: NeurasilChartsService, public neurasilDataFilter: NeurasilDataFilter) { }\n\n  ngOnInit() {\n    if (this.chartType) {\n      this.toolbarProps.chartType = this.chartType;\n    }\n\n    if (this.swapLabelsAndDatasets) {\n      this.toolbarProps.swapLabelsAndDatasets = this.swapLabelsAndDatasets\n    }\n\n    this.hasData = (this.data && this.data.length > 0);\n  }\n  ngAfterViewInit() {\n    this.drawChart();\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes) {\n      console.log(changes) \n      this.drawChart();\n    }\n  }\n\n  updateToolbarProps(ev) {\n    console.log(\">>>\" , ev)\n    console.log(this.toolbarProps)\n    this.chartTypeChange.emit(this.toolbarProps.chartType);\n    this.showToolbarChange.emit(this.showToolbar);\n    this.swapLabelsAndDatasetsChange.emit(this.toolbarProps.swapLabelsAndDatasets)\n    this.drawChart();\n  }\n\n\n  drawChart() {\n    if (this._canvas) {\n      this._canvas.destroy();\n    }\n    if (this.canvas) {\n      var ctx = this.canvas.nativeElement.getContext('2d');\n      let filterString = \"\"\n      if (this.globalFilter.length > 0) {\n        filterString += this.globalFilter + \",\"\n      }\n      filterString += this.toolbarProps._datasetFilter;\n      let filteredData = this.neurasilDataFilter.transform(this.data, filterString);\n      console.log(filteredData);\n      this.hasData = (filteredData && filteredData.length > 0);\n      if (this.hasData) {\n        let o = this.neurasilChartsService.parseDataFromDatasource(this.toolbarProps.chartType, filteredData, this.toolbarProps.swapLabelsAndDatasets);\n        let props = this.neurasilChartsService.chartObjectBuilder(this.toolbarProps.chartType, o.data, this.useAltAxis, this.chartTitle, this.yAxisLabelText, this.yAxisLabelText_Alt, this.xAxisLabelText, o._cornerstone, this.toolbarProps.swapLabelsAndDatasets, o._formatObject);\n        if (this.toolbarProps.chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\n          this.neurasilChartsService.performParetoAnalysis(props); // modify chart props object\n        }\n        this._canvas = new Chart(ctx, props);\n      }\n    }\n  }\n}\n","import { Component,Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { NEURASIL_CHART_TYPE } from '../models/NeurasilChartType'\r\n\r\n@Component({\r\n  selector: 'neurasil-charts-toolbar',\r\n  templateUrl: './neurasil-charts-toolbar.component.html',\r\n  styleUrls: ['./neurasil-charts-toolbar.component.sass']\r\n})\r\nexport class NeurasilChartsToolbarComponent {\r\n  @Input() toolbarProps;\r\n  @Output() toolbarPropsChange = new EventEmitter<any>();\r\n  NEURASIL_CHART_TYPE = NEURASIL_CHART_TYPE;\r\n  toolbarPropsChanged(ev){\r\n    //console.log(ev)\r\n    this.toolbarPropsChange.emit(this.toolbarProps);\r\n  }\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NeurasilChartsToolbarComponent } from './neurasil-charts-toolbar/neurasil-charts-toolbar.component'\nimport { NeurasilChartsComponent } from './neurasil-charts.component';\nimport { NeurasilDataFilter } from './pipes/neurasil-data-filter/neurasil-data-filter.pipe';\n\n@NgModule({\n  declarations: [\n    NeurasilChartsComponent,\n    NeurasilChartsToolbarComponent,\n    NeurasilDataFilter\n  ],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [NeurasilChartsComponent,NeurasilDataFilter]\n})\nexport class NeurasilChartsModule { }\n"]}