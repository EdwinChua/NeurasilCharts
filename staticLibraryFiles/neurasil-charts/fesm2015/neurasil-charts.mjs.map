{"version":3,"file":"neurasil-charts.mjs","sources":["../../../projects/neurasil-charts/src/lib/models/NeurasilChartType.ts","../../../projects/neurasil-charts/src/lib/neurasil-charts.service.ts","../../../projects/neurasil-charts/src/lib/pipes/neurasil-data-filter/neurasil-data-filter.pipe.ts","../../../projects/neurasil-charts/src/lib/neurasil-charts-toolbar/neurasil-charts-toolbar.component.ts","../../../projects/neurasil-charts/src/lib/neurasil-charts-toolbar/neurasil-charts-toolbar.component.html","../../../projects/neurasil-charts/src/lib/neurasil-charts.component.html","../../../projects/neurasil-charts/src/lib/neurasil-charts.component.ts","../../../projects/neurasil-charts/src/lib/neurasil-charts.module.ts","../../../projects/neurasil-charts/src/public-api.ts","../../../projects/neurasil-charts/src/neurasil-charts.ts"],"sourcesContent":["export enum NEURASIL_CHART_TYPE {\r\n    BAR = 0,\r\n    BAR_LINE = 1,\r\n    STACKED = 2,\r\n    LINE = 3,\r\n    PIE = 4,\r\n    DONUT = 5,\r\n    GRID = 6,\r\n    HORIZONTAL_BAR = 7,\r\n    STACKED_PARETO = 9\r\n}","import { Injectable } from '@angular/core';\r\nimport { NEURASIL_CHART_TYPE } from './models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NeurasilChartsService {\r\n\r\n  constructor() { }\r\n\r\n\r\n  parseDataFromDatasource(chartType: NEURASIL_CHART_TYPE, incomingData: Array<any>, swapLabelsAndDatasets: boolean): { _cornerstone: string, _formatObject: { prefix: string, suffix: string }, data: Array<any> } {\r\n    let returnData = {\r\n      _cornerstone: \"\",\r\n      _formatObject: null,\r\n      data: null\r\n    }\r\n\r\n    let data = JSON.parse(JSON.stringify(incomingData)); // make a copy of the data\r\n\r\n    let k_arr_Temp = Object.keys(data[0]);\r\n\r\n\r\n    let k_arr = Object.keys(data[0]);\r\n    let cDat = {};\r\n    for (let i = 0; i < k_arr.length; i++) {\r\n      let currKey = k_arr[i]\r\n      cDat[currKey] = [];\r\n      for (var j in data) {\r\n        cDat[k_arr[i]].push(data[j][currKey]);\r\n      }\r\n    }\r\n    // console.log(cDat)\r\n\r\n    let formatObj = {};\r\n    let k_arr_new = Object.keys(cDat);\r\n    returnData._cornerstone = k_arr_new[0];\r\n\r\n    for (let i = 0; i < k_arr_new.length; i++) { // for each key in formatted object\r\n      let currKey = k_arr_new[i];\r\n      formatObj[currKey] = {};\r\n      if (currKey != returnData._cornerstone) {\r\n        let testItem;\r\n        for (var j in cDat[currKey]) {\r\n          if (cDat[currKey][j]) { // set test item and break if the value is not null\r\n            testItem = cDat[currKey][j];\r\n            break;\r\n          }\r\n        }\r\n\r\n        let prefix = \"\";\r\n        let suffix = \"\";\r\n        if (testItem) {\r\n          if (!isNumber(testItem)) {\r\n            if (isNumber(testItem.substr(1))) {\r\n              prefix = testItem.substr(0, 1);\r\n\r\n            } else if (isNumber(testItem.substr(0, testItem.length - 1))) {\r\n              suffix = testItem.substr(testItem.length - 1);\r\n            }\r\n          }\r\n        }\r\n\r\n        formatObj[currKey] = {\r\n          prefix: prefix,\r\n          suffix: suffix\r\n        }\r\n\r\n        // format each data in the individual arrays\r\n        for (var k in cDat[currKey]) {\r\n          if (prefix != \"\") {\r\n            cDat[currKey][k] = cDat[currKey][k].replace(prefix, \"\");\r\n          }\r\n          if (suffix != \"\") {\r\n            cDat[currKey][k] = cDat[currKey][k].replace(suffix, \"\");\r\n          }\r\n\r\n          //newStr = cDat\r\n          //replaceData.push()\r\n        }\r\n\r\n      } else if (currKey == returnData._cornerstone) {\r\n        formatObj[currKey] = {\r\n          prefix: \"\",\r\n          suffix: \"\"\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n\r\n    if (!swapLabelsAndDatasets) {\r\n      // do nothing;\r\n      // return cDat;\r\n    }\r\n    else {\r\n      let cDat_New = {};\r\n\r\n      cDat_New[returnData._cornerstone] = Object.keys(cDat);\r\n      let index = cDat_New[returnData._cornerstone].indexOf(returnData._cornerstone);\r\n      if (index > -1) {\r\n        cDat_New[returnData._cornerstone].splice(index, 1);\r\n      }\r\n      for (let i = 0; i < cDat[returnData._cornerstone].length; i++) {\r\n        cDat_New[cDat[returnData._cornerstone][i]] = [];\r\n        for (var j in cDat_New[returnData._cornerstone]) {\r\n          cDat_New[cDat[returnData._cornerstone][i]].push(cDat[cDat_New[returnData._cornerstone][j]][i])\r\n        }\r\n      }\r\n      //return cDat_New;\r\n      cDat = cDat_New; // reassign to cDat\r\n    }\r\n\r\n\r\n    if (chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n      // Add suffixes to auto-generated lines\r\n      formatObj[\"Pareto\"] = {\r\n        prefix: \"\",\r\n        suffix: \"%\"\r\n      }\r\n      formatObj[\"80% line\"] = {\r\n        prefix: \"\",\r\n        suffix: \"%\"\r\n      }\r\n    }\r\n\r\n    function isNumber(value: string | number): boolean {\r\n      return ((value != null) && !isNaN(Number(value.toString())));\r\n    }\r\n\r\n    returnData._formatObject = formatObj;\r\n    returnData.data = cDat;\r\n    // console.log(returnData);\r\n    return returnData;\r\n  }\r\n\r\n\r\n  chartObjectBuilder(chartType, chartData, useAltAxis, title, yAxisLabelText, yAxisLabelText_Alt, xAxisLabelText, cornerstone, swapLabelsAndDatasets, formatObject) {\r\n    if ((chartType == NEURASIL_CHART_TYPE.BAR || chartType == NEURASIL_CHART_TYPE.HORIZONTAL_BAR || chartType == NEURASIL_CHART_TYPE.LINE || chartType == NEURASIL_CHART_TYPE.STACKED || chartType == NEURASIL_CHART_TYPE.PIE || chartType == NEURASIL_CHART_TYPE.DONUT) && useAltAxis == true) {\r\n      console.warn(\"You have enabled alternate axis on a (unsupported) chart type. It has been set to false\");\r\n      useAltAxis = false;\r\n    }\r\n\r\n    if (chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n      yAxisLabelText_Alt = \"Pareto %\";\r\n      useAltAxis = true;\r\n    }\r\n\r\n    let options: any = {\r\n      maintainAspectRatio: false,\r\n      responsive: true,\r\n    };\r\n    if (title) {\r\n      options.title = {\r\n        display: true,\r\n        text: title\r\n      }\r\n    }\r\n\r\n    let yAxisLabel = { display: false, text: \"\" }\r\n    if (yAxisLabelText) {\r\n      yAxisLabel.display = true;\r\n      yAxisLabel.text = yAxisLabelText;\r\n    }\r\n\r\n    let yAxisLabel_Alt = { display: false, text: \"\" }\r\n    if (yAxisLabelText_Alt) {\r\n      yAxisLabel_Alt.display = true;\r\n      yAxisLabel_Alt.text = yAxisLabelText_Alt;\r\n    }\r\n\r\n    let xAxisLabel = { display: false, text: null };\r\n    if (xAxisLabelText) {\r\n      xAxisLabel.display = true;\r\n      xAxisLabel.text = xAxisLabelText;\r\n    }\r\n    else {\r\n      xAxisLabel.display = true;\r\n      xAxisLabel.text = [\" \", \" \"];\r\n    }\r\n    // console.log(xAxisLabelText)\r\n    if (chartType != NEURASIL_CHART_TYPE.PIE && chartType != NEURASIL_CHART_TYPE.DONUT) {\r\n      if (chartType == NEURASIL_CHART_TYPE.STACKED || chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n\r\n        options.scales = {\r\n          x: {\r\n            stacked: true,\r\n            title: xAxisLabel\r\n          },\r\n          yAxis: {\r\n            type:'linear',\r\n            position: 'left',\r\n            stacked: true,\r\n            title: yAxisLabel\r\n          }\r\n        }\r\n\r\n        if (chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n          \r\n          let altAxisObj: any = {\r\n            //id: 'yAxis_pareto',\r\n            type:'linear',\r\n            position: 'right',\r\n            display: true,\r\n            beginAtZero: true,\r\n            ticks:{},\r\n            title: yAxisLabel_Alt\r\n          }\r\n          altAxisObj.min = 0;\r\n          altAxisObj.max = 100;\r\n          altAxisObj.ticks = {\r\n            stepSize: 80\r\n          }\r\n\r\n          options.scales.yAxis_pareto= altAxisObj;\r\n          \r\n        }\r\n\r\n      } else {\r\n        options.scales = {\r\n          x: {\r\n            title: xAxisLabel\r\n          },\r\n          yAxis: {\r\n            beginAtZero: true,\r\n            title: yAxisLabel\r\n          },\r\n        }\r\n\r\n        if (useAltAxis) {\r\n          let altAxisObj: any = {\r\n            //id: 'yAxis_alt',\r\n            display: true,\r\n            ticks: {\r\n              beginAtZero: true,\r\n            },\r\n            position: 'right',\r\n            type:'linear',\r\n            title: yAxisLabel_Alt\r\n          }\r\n          // if (chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n          //   altAxisObj.ticks.min = 0;\r\n          //   altAxisObj.ticks.max = 100;\r\n          //   altAxisObj.ticks.stepSize = 80\r\n          // }\r\n          options.scales.yAxis_alt = altAxisObj;\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    let type;\r\n    if (chartType == NEURASIL_CHART_TYPE.LINE) {\r\n      type = 'line'\r\n    } else if (chartType == NEURASIL_CHART_TYPE.BAR ||\r\n      chartType == NEURASIL_CHART_TYPE.BAR_LINE ||\r\n      chartType == NEURASIL_CHART_TYPE.STACKED ||\r\n      chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n      type = 'bar'\r\n    } else if (chartType == NEURASIL_CHART_TYPE.HORIZONTAL_BAR) {\r\n      type = 'bar'\r\n    } else if (chartType == NEURASIL_CHART_TYPE.PIE) {\r\n      type = 'pie'\r\n    }\r\n    else if (chartType == NEURASIL_CHART_TYPE.DONUT) {\r\n      type = 'doughnut'\r\n    }\r\n\r\n\r\n    let THIS = this;\r\n\r\n    // tooltip & title prefix/suffix addition. Title uses default configs for bar /line\r\n    options.tooltips = {};\r\n    options.tooltips.callbacks = {};\r\n\r\n    if (chartType == NEURASIL_CHART_TYPE.BAR ||\r\n      chartType == NEURASIL_CHART_TYPE.BAR_LINE ||\r\n      chartType == NEURASIL_CHART_TYPE.LINE ||\r\n      chartType == NEURASIL_CHART_TYPE.STACKED ||\r\n      chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n      options.tooltips.callbacks.label = function (tooltipItem, data) {\r\n        var label = data.datasets[tooltipItem.datasetIndex].label || '';\r\n        if (label) {\r\n          label += ': ';\r\n        }\r\n        if (swapLabelsAndDatasets) {\r\n          label += `${formatObject[tooltipItem.xLabel].prefix}` + tooltipItem.yLabel + `${formatObject[tooltipItem.xLabel].suffix}`;\r\n        } else {\r\n\r\n          let objKeys = Object.keys(formatObject);\r\n          let key = objKeys[tooltipItem.datasetIndex + 1]\r\n          let formatObj = formatObject[key];\r\n          label += `${formatObj.prefix}` + tooltipItem.yLabel + `${formatObj.suffix}`;;\r\n        }\r\n        return label;\r\n      }\r\n    } else if (chartType == NEURASIL_CHART_TYPE.PIE || chartType == NEURASIL_CHART_TYPE.DONUT) {\r\n      options.tooltips.callbacks.label = function (tooltipItem, data) {\r\n        var label = data.labels[tooltipItem.index];\r\n        if (label) {\r\n          label += ': ';\r\n        }\r\n        let formatObj;\r\n        if (swapLabelsAndDatasets) {\r\n          formatObj = formatObject[data.labels[tooltipItem.index]];\r\n\r\n        } else {\r\n          formatObj = formatObject[data.datasets[tooltipItem.datasetIndex].label];\r\n\r\n        }\r\n        label += `${formatObj.prefix}${data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]}${formatObj.suffix}`;\r\n        return label;\r\n      }\r\n      options.tooltips.callbacks.title = function (tooltipItem, data) {\r\n        return data.datasets[tooltipItem[0].datasetIndex].label;\r\n      }\r\n    } else if (chartType == NEURASIL_CHART_TYPE.HORIZONTAL_BAR) {\r\n      options.indexAxis = 'y';\r\n      options.tooltips.callbacks.label = function (tooltipItem, data) {\r\n\r\n        var label = data.datasets[tooltipItem.datasetIndex].label;\r\n        if (label) {\r\n          label += ': ';\r\n        }\r\n        let formatObj;\r\n        if (swapLabelsAndDatasets) {\r\n          formatObj = formatObject[data.labels[tooltipItem.index]];\r\n\r\n        } else {\r\n          formatObj = formatObject[data.datasets[tooltipItem.datasetIndex].label];\r\n\r\n        }\r\n        label += `${formatObj.prefix}${data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]}${formatObj.suffix}`;\r\n        return label;\r\n      }\r\n      options.tooltips.callbacks.title = function (tooltipItem, data) {\r\n\r\n        return tooltipItem[0].yLabel;\r\n      }\r\n    }\r\n\r\n\r\n    let returnOpts = {\r\n      plugins:[],\r\n      type: type,\r\n      data: this.dataParser(chartData, useAltAxis, chartType, cornerstone, swapLabelsAndDatasets),\r\n      options: options\r\n    }\r\n    return returnOpts;\r\n  }\r\n\r\n  dataParser(chartData, useAltAxis /*boolean*/, chartType /*chartType enum*/, cornerstone, swapLabelsAndDatasets) {\r\n\r\n    // helper function to get color array for chart. cycles through when \r\n    function getPalette(opacity, noOfColors) {\r\n      let colors = [\r\n        `rgba(199,233,180,${opacity})`,\r\n        `rgba(127,205,187,${opacity})`,\r\n        `rgba(65,182,196,${opacity})`,\r\n        `rgba(29,145,192,${opacity})`,\r\n        `rgba(34,94,168,${opacity})`,\r\n        `rgba(37,52,148,${opacity})`,\r\n        `rgba(8,29,88,${opacity})`,\r\n        `rgba(254,178,76,${opacity})`,\r\n        `rgba(253,141,60,${opacity})`,\r\n        `rgba(252,78,42,${opacity})`,\r\n        `rgba(227,26,28,${opacity})`,\r\n        `rgba(189,0,38,${opacity})`,\r\n        `rgba(128,0,38,${opacity})`\r\n      ];\r\n\r\n      if (noOfColors > colors.length) { // if more colors are required than available, cycle through beginning again\r\n        let diff = noOfColors - colors.length;\r\n        let colorsLength = colors.length;\r\n        for (var i = 0; i <= diff; i) { // NO INCREMENT HERE\r\n          for (var j = 0; j < colorsLength; j++) {\r\n            colors.push(colors[j])\r\n            i++; // INCREMENT HERE\r\n          }\r\n        }\r\n      }\r\n\r\n      return colors;\r\n    }\r\n\r\n    let colorPalatte;\r\n    let bgColorPalatte;\r\n    let bgColorPalatte_hover;\r\n    if (!swapLabelsAndDatasets) {\r\n      colorPalatte = getPalette(1, chartData[cornerstone].length)\r\n      bgColorPalatte = getPalette(0.3, chartData[cornerstone].length)\r\n      bgColorPalatte_hover = getPalette(0.5, chartData[cornerstone].length)\r\n    } else {\r\n      colorPalatte = getPalette(1, Object.keys(chartData).length)\r\n      bgColorPalatte = getPalette(0.3, Object.keys(chartData).length)\r\n      bgColorPalatte_hover = getPalette(0.5,  Object.keys(chartData).length)\r\n    }\r\n\r\n\r\n\r\n    let dataSets = [];\r\n    let objKeys = Object.keys(chartData);\r\n    let index = objKeys.indexOf(cornerstone);\r\n    if (index > -1) {\r\n      objKeys.splice(index, 1);\r\n    }\r\n\r\n\r\n    for (let i = 0; i < objKeys.length; i++) {\r\n\r\n      let yAxis = 'yAxis';\r\n      if (useAltAxis) {\r\n        if (i > 0) {\r\n          yAxis += '_alt';\r\n        }\r\n      }\r\n      // console.log(objKeys[i])\r\n      let dataSet: any = {\r\n        label: objKeys[i],\r\n        data: chartData[objKeys[i]],\r\n        backgroundColor: bgColorPalatte[i],\r\n        borderColor: colorPalatte[i],\r\n        hoverBackgroundColor: bgColorPalatte_hover[i],\r\n        hoverBorderColor: colorPalatte[i],\r\n        borderWidth: 2\r\n      };\r\n\r\n      // console.log(dataSet)\r\n      if (chartType == NEURASIL_CHART_TYPE.BAR_LINE) { // ignores stacked and bar options. Makes assumption that only 1st dataset is bar\r\n        if (i == 0) {\r\n          dataSet.type = 'bar';\r\n        } else {\r\n          dataSet.type = 'line';\r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n      if (chartType == NEURASIL_CHART_TYPE.BAR || chartType == NEURASIL_CHART_TYPE.HORIZONTAL_BAR || chartType == NEURASIL_CHART_TYPE.STACKED || chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n        dataSet.backgroundColor = bgColorPalatte[i];\r\n        dataSet.borderColor = colorPalatte[i];\r\n        dataSet.hoverBackgroundColor = bgColorPalatte_hover[i];\r\n        dataSet.hoverBorderColor = colorPalatte[i];\r\n      } else if (chartType == NEURASIL_CHART_TYPE.BAR_LINE || chartType == NEURASIL_CHART_TYPE.LINE) {\r\n        if (dataSet.type == 'bar') {\r\n          dataSet.backgroundColor = bgColorPalatte[i];\r\n          dataSet.borderColor = colorPalatte[i];\r\n          dataSet.hoverBackgroundColor = bgColorPalatte_hover[i];\r\n          dataSet.hoverBorderColor = colorPalatte[i];\r\n        } else {\r\n          dataSet.borderColor = colorPalatte[i];\r\n          dataSet.backgroundColor = 'rgba(0,0,0,0)';\r\n        }\r\n      } else if (chartType == NEURASIL_CHART_TYPE.PIE || chartType == NEURASIL_CHART_TYPE.DONUT) {// overwrite single color assignment to array.\r\n        dataSet.backgroundColor = bgColorPalatte;\r\n        dataSet.borderColor = colorPalatte;\r\n        dataSet.hoverBackgroundColor = bgColorPalatte_hover;\r\n        dataSet.hoverBorderColor = colorPalatte;\r\n      }\r\n\r\n\r\n      if (chartType != NEURASIL_CHART_TYPE.PIE && chartType != NEURASIL_CHART_TYPE.DONUT) {\r\n        if (chartType != NEURASIL_CHART_TYPE.STACKED && chartType != NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n          dataSet.yAxisID = yAxis;\r\n        }\r\n      }\r\n\r\n      dataSets.push(dataSet);\r\n    }\r\n    let returnData = {\r\n      labels: chartData[cornerstone],\r\n      datasets: dataSets\r\n    }\r\n    return returnData;\r\n  }\r\n\r\n  performParetoAnalysis(props){\r\n    //modify chart object\r\n    let localSumArr = [];\r\n    let totalSum = 0;\r\n\r\n    // calculate the local sum of each datapoint (i.e. for datasets 1, 2, 3, sum of each corresponding datapoint ds1[0] + ds2[0] + ds3[0]) \r\n    for (let j = 0; j < props.data.datasets[0].data.length; j++) { // takes the first dataset length as reference\r\n      let sum = 0;\r\n      for (let i = 0; i < props.data.datasets.length; i++) { // for each dataset\r\n        let val = parseFloat(props.data.datasets[i].data[j]);\r\n        if (isNaN(val)) {\r\n          val = 0; // set invalid values as 0\r\n        }\r\n        sum += val\r\n      }\r\n      localSumArr.push(sum);\r\n      totalSum += sum;\r\n    }\r\n\r\n    //populate new array with modified sorting object\r\n    let newArr = []; // this array holds an object with the sum, label, and data from each dataset\r\n    /*\r\n    Each object looks like this:\r\n    o = {\r\n            sum: 418\r\n            labels: \"Whatever label\"\r\n            0: 66\r\n            1: 98\r\n            2: 67\r\n            3: 96\r\n            4: 91\r\n        }\r\n    */\r\n    for (let i = 0; i < localSumArr.length; i++) {\r\n      let o = {\r\n        sum: localSumArr[i],\r\n        labels: props.data.labels[i],\r\n      }\r\n      for (let j = 0; j < props.data.datasets.length; j++) {\r\n        o[j] = props.data.datasets[j].data[i];\r\n      }\r\n      newArr.push(o)\r\n    }\r\n\r\n    //sort new array (newArr) descending [\"sum\"] property\r\n    newArr.sort(function (a, b) {\r\n      return ((a.sum < b.sum) ? 1 : ((a.sum == b.sum) ? 0 : -1));\r\n    });\r\n\r\n    //rebuild and reassign labels array - directly modifies chart object passed in\r\n    let newLabelsArray = []\r\n    for (let i =0; i < newArr.length; i++){\r\n      newLabelsArray.push(newArr[i][\"labels\"]);\r\n    }\r\n    props.data.labels = newLabelsArray;\r\n\r\n    //rebuild and reassign data array for each dataset - directly modifies chart object passed in\r\n    for (let j = 0; j < props.data.datasets.length; j++) {\r\n      let data = [];\r\n      for (let i = 0; i < newArr.length; i++){\r\n        data.push(newArr[i][j])\r\n      }\r\n      props.data.datasets[j].data = data;\r\n    }\r\n\r\n    //create a sorted local sum array for pareto curve calculations\r\n    let sortedlocalSumArr = [];\r\n    for (let i = 0 ; i < newArr.length; i++){\r\n      sortedlocalSumArr.push(newArr[i].sum)\r\n    }\r\n\r\n    let rollingSum = 0; // cumulative sum of values\r\n    let paretoLineValues = [];\r\n    let eightyPercentLine = []; // hard coded to 80%\r\n\r\n    // calculate and push pareto line, also populate 80% line array\r\n    for (let i = 0 ; i < sortedlocalSumArr.length; i++){\r\n      rollingSum += sortedlocalSumArr[i];\r\n      let paretoVal = rollingSum/totalSum * 100;\r\n      paretoLineValues.push( Math.floor(paretoVal * 100) / 100 );\r\n      eightyPercentLine.push(80)\r\n    }\r\n    \r\n    // add pareto curve as a new dataset - directly modifies chart object passed in \r\n    props.data.datasets.push({\r\n      \"label\":\"Pareto\",\r\n      \"data\":paretoLineValues,\r\n      \"backgroundColor\":\"rgba(0,0,0,0)\",\r\n      \"borderColor\":\"rgba(0,0,0,0.8)\",\r\n      \"borderWidth\":2,\r\n      \"type\":\"line\",\r\n      \"yAxisID\":\"yAxis_pareto\",\r\n      \"datalabels\": {\r\n        \"display\":false\r\n      },\r\n      \"pointRadius\": 0\r\n    })\r\n\r\n    // push 80% line as a new dataset - directly modifies chart object passed in\r\n    props.data.datasets.push({\r\n      \"label\":\"80% line\",\r\n      \"data\":eightyPercentLine,\r\n      \"backgroundColor\":\"rgba(0,0,0,0)\",\r\n      \"borderColor\":\"rgba(0,0,0,0.8)\",\r\n      \"borderWidth\":2,\r\n      \"type\":\"line\",\r\n      \"yAxisID\":\"yAxis_pareto\",\r\n      \"datalabels\": {\r\n        \"display\":false\r\n      },\r\n      \"pointRadius\": 0\r\n    })\r\n  }\r\n\r\n    // unused. Migrated code to NeurasilDataFilterPipe\r\n  // filterData(data: Array<any>, datasetFilter: string) {\r\n\r\n  //   if (datasetFilter) {\r\n  //     let filterTerms = datasetFilter.split(',');\r\n  //     let includeTerms = [];\r\n  //     let excludeTerms = [];\r\n  //     let includeColumns = [];\r\n  //     let excludeColumns = [];\r\n  //     for (let i in filterTerms) {\r\n  //       if (filterTerms[i] != null && filterTerms[i] != undefined && filterTerms[i].length > 1) {\r\n  //         let term = filterTerms[i].trim().toLowerCase();\r\n  //         if (term[0] == \"-\") {\r\n  //           excludeTerms.push(term.replace(\"-\", \"\").trim());\r\n  //         } else if (term[0] == \"~\") {\r\n  //           if (term[1] == \"!\") {\r\n  //             excludeColumns.push(term.replace(\"~!\", \"\").trim());\r\n  //           } else {\r\n  //             includeColumns.push(term.replace(\"~\", \"\").trim())\r\n  //           }\r\n  //         } else {\r\n  //           includeTerms.push(term.trim())\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n\r\n  //     let data_Filtered = data.filter(function (dataItem) {\r\n  //       let k_arr = Object.keys(dataItem);\r\n  //       let searchString = \"\";\r\n  //       for (let i in k_arr) {\r\n  //         let currKey = k_arr[i];\r\n  //         let value = dataItem[currKey];\r\n  //         searchString += value + \" \";\r\n  //       }\r\n  //       searchString = searchString.toLowerCase().trim();\r\n  //       let currentPassingStatus = false;\r\n  //       if (includeTerms.length > 0) {\r\n  //         for (let i in includeTerms) {\r\n  //           if (searchString.includes(includeTerms[i])) {\r\n  //             currentPassingStatus = true;\r\n  //             break;\r\n  //           }\r\n  //         }\r\n  //       } else {\r\n  //         currentPassingStatus = true;\r\n  //       }\r\n  //       if (excludeTerms.length > 0 && currentPassingStatus) {\r\n  //         for (let i in excludeTerms) {\r\n  //           if (searchString.includes(excludeTerms[i])) {\r\n  //             currentPassingStatus = false;\r\n  //             break;\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //       if (currentPassingStatus) {\r\n\r\n  //         return dataItem;\r\n  //       }\r\n  //     });\r\n\r\n  //     if (includeColumns.length > 0 && excludeColumns.length > 0) {\r\n  //       window.alert(\"Unsupported usage of include & exclude columns. Things may break\")\r\n  //     }\r\n  //     //after filtering is complete, remove columns from clone of data\r\n  //     else if (excludeColumns.length > 0) {\r\n  //       data_Filtered = JSON.parse(JSON.stringify(data_Filtered))\r\n  //       //console.log(\"here\")\r\n  //       for (var h in data_Filtered) {\r\n  //         let dataItem = data_Filtered[h];\r\n  //         let k_arr = Object.keys(dataItem);\r\n  //         //for (let i in k_arr) {\r\n  //         for (let i = 0; i < k_arr.length; i++) {\r\n  //           if (i > 0) {// skip the first column. Do not allow user to delete first column\r\n  //             for (var j in excludeColumns) {\r\n  //               let processedKey = k_arr[i].trim().toLowerCase();\r\n  //               if (processedKey.includes(excludeColumns[j])) {\r\n  //                 delete dataItem[k_arr[i]];\r\n  //               }\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     else if (includeColumns.length > 0) {\r\n  //       data_Filtered = JSON.parse(JSON.stringify(data_Filtered));\r\n  //       for (var h in data_Filtered) {\r\n  //         let dataItem = data_Filtered[h];\r\n  //         let k_arr = Object.keys(dataItem);\r\n  //         for (let i = 0; i < k_arr.length; i++) {\r\n  //           if (i > 0) {// skip the first column. Needed?\r\n  //             let processedKey = k_arr[i].trim().toLowerCase();\r\n  //             let keepColumn = false;\r\n  //             for (var j in includeColumns) {\r\n  //               if (processedKey.includes(includeColumns[j])) {\r\n  //                 keepColumn = true;\r\n  //               }\r\n  //               // if (!processedKey.includes(includeColumns[j])) {\r\n  //               //     delete dataItem[k_arr[i]];\r\n  //               // }\r\n  //             }\r\n  //             if (!keepColumn) {\r\n  //               delete dataItem[k_arr[i]];\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     return data_Filtered;\r\n  //   }\r\n  //   return data; // if no filter, return original data\r\n  // }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'neurasilDataFilter',\r\n  pure: true\r\n})\r\nexport class NeurasilDataFilter implements PipeTransform {\r\n\r\n  transform(data: any[], filterText: string): any {\r\n    if (filterText === \"\" || filterText === null || filterText === undefined) {\r\n      return data;\r\n    } else {\r\n      if (filterText) {\r\n        let filterTerms = filterText.split(',');\r\n        let includeTerms = [];\r\n        let excludeTerms = [];\r\n        let includeColumns = [];\r\n        let excludeColumns = [];\r\n        for (let i in filterTerms) {\r\n          if (filterTerms[i] != null && filterTerms[i] != undefined && filterTerms[i].length > 1) {\r\n            let term = filterTerms[i].trim().toLowerCase();\r\n            if (term[0] == \"-\") {\r\n              excludeTerms.push(term.replace(\"-\", \"\").trim());\r\n            } else if (term[0] == \"~\") {\r\n              if (term[1] == \"!\") {\r\n                excludeColumns.push(term.replace(\"~!\", \"\").trim());\r\n              } else {\r\n                includeColumns.push(term.replace(\"~\", \"\").trim())\r\n              }\r\n            } else {\r\n              includeTerms.push(term.trim())\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n        let data_Filtered = data.filter(function (dataItem) {\r\n          let k_arr = Object.keys(dataItem);\r\n          let searchString = \"\";\r\n          for (let i in k_arr) {\r\n            let currKey = k_arr[i];\r\n            let value = dataItem[currKey];\r\n            searchString += value + \" \";\r\n          }\r\n          searchString = searchString.toLowerCase().trim();\r\n          let currentPassingStatus = false;\r\n          if (includeTerms.length > 0) {\r\n            for (let i in includeTerms) {\r\n              if (searchString.includes(includeTerms[i])) {\r\n                currentPassingStatus = true;\r\n                break;\r\n              }\r\n            }\r\n          } else {\r\n            currentPassingStatus = true;\r\n          }\r\n          if (excludeTerms.length > 0 && currentPassingStatus) {\r\n            for (let i in excludeTerms) {\r\n              if (searchString.includes(excludeTerms[i])) {\r\n                currentPassingStatus = false;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (currentPassingStatus) {\r\n\r\n            return dataItem;\r\n          }\r\n        });\r\n\r\n        if (includeColumns.length > 0 && excludeColumns.length > 0) {\r\n          window.alert(\"Unsupported usage of include & exclude columns. Things may break\")\r\n        }\r\n        //after filtering is complete, remove columns from clone of data\r\n        else if (excludeColumns.length > 0) {\r\n          data_Filtered = JSON.parse(JSON.stringify(data_Filtered))\r\n          //console.log(\"here\")\r\n          for (var h in data_Filtered) {\r\n            let dataItem = data_Filtered[h];\r\n            let k_arr = Object.keys(dataItem);\r\n            //for (let i in k_arr) {\r\n            for (let i = 0; i < k_arr.length; i++) {\r\n              if (i > 0) {// skip the first column. Do not allow user to delete first column\r\n                for (var j in excludeColumns) {\r\n                  let processedKey = k_arr[i].trim().toLowerCase();\r\n                  if (processedKey.includes(excludeColumns[j])) {\r\n                    delete dataItem[k_arr[i]];\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        else if (includeColumns.length > 0) {\r\n          data_Filtered = JSON.parse(JSON.stringify(data_Filtered));\r\n          for (var h in data_Filtered) {\r\n            let dataItem = data_Filtered[h];\r\n            let k_arr = Object.keys(dataItem);\r\n            for (let i = 0; i < k_arr.length; i++) {\r\n              if (i > 0) {// skip the first column. Needed?\r\n                let processedKey = k_arr[i].trim().toLowerCase();\r\n                let keepColumn = false;\r\n                for (var j in includeColumns) {\r\n                  if (processedKey.includes(includeColumns[j])) {\r\n                    keepColumn = true;\r\n                  }\r\n                  // if (!processedKey.includes(includeColumns[j])) {\r\n                  //     delete dataItem[k_arr[i]];\r\n                  // }\r\n                }\r\n                if (!keepColumn) {\r\n                  delete dataItem[k_arr[i]];\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        return data_Filtered;\r\n      }\r\n      return data; // if no filter, return original data\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component,Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { NEURASIL_CHART_TYPE } from '../models/NeurasilChartType'\r\n\r\n@Component({\r\n  selector: 'neurasil-charts-toolbar',\r\n  templateUrl: './neurasil-charts-toolbar.component.html',\r\n  styleUrls: ['./neurasil-charts-toolbar.component.sass']\r\n})\r\nexport class NeurasilChartsToolbarComponent {\r\n  @Input() toolbarProps;\r\n  @Output() toolbarPropsChange = new EventEmitter<any>();\r\n  NEURASIL_CHART_TYPE = NEURASIL_CHART_TYPE;\r\n  toolbarPropsChanged(ev){\r\n    //console.log(ev)\r\n    this.toolbarPropsChange.emit(this.toolbarProps);\r\n  }\r\n}","<div class=\"toolbar-container\" >\r\n    <div class=\"toolbar\">\r\n        <div class=\"filter-textbox-container input-group input-group-sm\">\r\n            <input type=\"text\" class=\"filter-textbox form-control noSelect\" placeholder=\"Filters\" [(ngModel)]=\"toolbarProps._datasetFilter\" (change)=\"toolbarPropsChanged($event)\">\r\n        </div>\r\n        <div class=\"input-group input-group-sm filter-help\" >\r\n            <div class=\"tooltip_qd_chartHelper\">?\r\n                <span class=\"tooltiptext_qd_chartHelper\">\r\n                To filter data, use commas to separate data, add - to exclude data.\r\n                <br> <br> \r\n                EITHER use ~ to include columns OR ~! to exclude columns.\r\n                </span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"chart-selector-container\">\r\n            <div class=\"chart-selector input-group input-group-sm\">\r\n                <select class=\"form-control\" [(ngModel)]=\"toolbarProps.chartType\" (ngModelChange)=\"toolbarPropsChanged($event)\">\r\n                    <option value='0'>Bar Chart</option>\r\n                    <option value='7'>Horizontal Bar</option>               \r\n                    <option value='2'>Stacked Bar Chart</option>\r\n                    <option value='3'>Line Chart</option>\r\n                    <option value='1'>Bar & Line Combo</option>\r\n                    <option value='4'>Pie</option>\r\n                    <option value='5'>Donut</option>\r\n                    <!-- <option value='8'>Pareto (1 dataset)</option> -->\r\n                    <option value='9'>Pareto Analysis</option>\r\n                    <option value='6'>Grid View</option>\r\n\r\n                </select>\r\n            </div>\r\n            <div style=\"float:right\">\r\n                <div style=\"padding-top:4px;padding-right: 15px; padding-left:5px\">\r\n                    <span style=\"zoom:0.8;\">\r\n                        <label class=\"switch tooltip_qd_chartHelper\" >\r\n                        <input type='checkbox' id='${this.id}_swapCheckbox'  [(ngModel)]=\"toolbarProps.swapLabelsAndDatasets\" (ngModelChange)=\"toolbarPropsChanged($event)\">\r\n                            <span class=\"slider round\"></span>\r\n                            <span class=\"tooltiptext_qd_chartHelper\">\r\n                                Swap labels and datasets\r\n                            </span>\r\n                        </label>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","\r\n<div class=\"component-wrapper\">\r\n    <div class=\"toolbar-wrapper\" *ngIf=\"showToolbar\">\r\n        <neurasil-charts-toolbar [(toolbarProps)]=\"toolbarProps\" (toolbarPropsChange)=\"updateToolbarProps($event)\"></neurasil-charts-toolbar>\r\n    </div>\r\n    <div class=\"canvas-wrapper\">\r\n        <canvas [ngClass]=\"hasData ? '' : 'canvas-hidden'\" #neurasilChartCanvas id=\"neurasilChartCanvas\"></canvas>\r\n        <div class=\"overlay\" *ngIf=\"!hasData\">\r\n            <div class=\"overlay-contents\">\r\n                {{noDataMessage}}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\nimport { NeurasilChartsService } from './neurasil-charts.service';\r\nimport { NEURASIL_CHART_TYPE } from './models';\r\nimport { NeurasilDataFilter } from './pipes';\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables)\r\n// import Chart from 'chart.js/auto';\r\nimport { HostListener } from '@angular/core';\r\n\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'neurasil-charts',\r\n  templateUrl: './neurasil-charts.component.html',\r\n  styleUrls: ['./neurasil-charts.component.sass'],\r\n  providers: [NeurasilDataFilter]\r\n})\r\nexport class NeurasilChartsComponent implements OnInit, AfterViewInit, OnChanges {\r\n\r\n  @ViewChild('neurasilChartCanvas', { static: false }) canvas: ElementRef;\r\n\r\n  /** Data to plot */\r\n  @Input() data: Array<any>;\r\n  /** Show hide toolbar */\r\n  @Input() showToolbar: boolean = true;\r\n  /** User-defined default chart type */\r\n  @Input() chartType: NEURASIL_CHART_TYPE = null;\r\n  /** Show right axis for shits and giggles */\r\n  @Input() useAltAxis: boolean = true; // not sure if needed\r\n  /** Set a chart title */\r\n  @Input() chartTitle: string = \"\";\r\n  /** X-Axis text */\r\n  @Input() xAxisLabelText: string = \"\";\r\n  /** Y-Axis text */\r\n  @Input() yAxisLabelText: string = \"\";\r\n  /** Alt-Y-Axis text   */\r\n  @Input() yAxisLabelText_Alt: string = \"\";\r\n  /** Swap Dataset and Labels \r\n   * @\r\n   */\r\n  @Input() swapLabelsAndDatasets: boolean;\r\n  /** Filter data */\r\n  @Input() globalFilter: string = \"\";\r\n  /** Show data labels \r\n   * @param showDataLabels default: false\r\n  */\r\n  @Input() showDataLabels: boolean = false;\r\n\r\n  @Input() noDataMessage: string = \"No data to display. Check your filters.\";\r\n\r\n  /** Emits event from changing Chart type from toolbar (I think, forgot what else this does) */\r\n  @Output() chartTypeChange = new EventEmitter();\r\n  /** Forgot what this does */\r\n  @Output() showToolbarChange = new EventEmitter();\r\n  /** Emits event from toggling the swap label/data switch from toolbar (I think, forgot what else this does) */\r\n  @Output() swapLabelsAndDatasetsChange = new EventEmitter();\r\n  /** Emits data from clicked chart item */\r\n  @Output() dataOnClick = new EventEmitter();\r\n\r\n  /** default toolbar props */\r\n  toolbarProps = {\r\n    chartType: this.chartType ? this.chartType : NEURASIL_CHART_TYPE.BAR,\r\n    _datasetFilter: \"\",\r\n    swapLabelsAndDatasets: false\r\n  };\r\n\r\n  public _canvas: any;\r\n  hasData: boolean; // for the purpose of checking length in html template\r\n\r\n\r\n  constructor(public neurasilChartsService: NeurasilChartsService, public neurasilDataFilter: NeurasilDataFilter) { }\r\n\r\n  ngOnInit() {\r\n    if (this.chartType) {\r\n      this.toolbarProps.chartType = this.chartType;\r\n    }\r\n\r\n    if (this.swapLabelsAndDatasets) {\r\n      this.toolbarProps.swapLabelsAndDatasets = this.swapLabelsAndDatasets\r\n    }\r\n\r\n    this.hasData = (this.data && this.data.length > 0);\r\n  }\r\n  ngAfterViewInit() {\r\n    this.drawChart();\r\n  }\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes) {\r\n      // console.log(changes)\r\n      this.drawChart();\r\n    }\r\n  }\r\n  @HostListener('window:beforeprint', ['$event'])\r\n  onBeforePrint(event) {\r\n    // this.drawChart(true)\r\n\r\n  }\r\n  @HostListener('window:afterprint', ['$event'])\r\n  onAfterPrint(event) {\r\n    // this.drawChart(false);\r\n  }\r\n  updateToolbarProps(ev) {\r\n\r\n    this.chartTypeChange.emit(this.toolbarProps.chartType);\r\n    this.showToolbarChange.emit(this.showToolbar);\r\n    this.swapLabelsAndDatasetsChange.emit(this.toolbarProps.swapLabelsAndDatasets)\r\n    this.drawChart();\r\n  }\r\n\r\n\r\n  drawChart(isPrinting:boolean =false) {\r\n    if (this._canvas) {\r\n      this._canvas.destroy();\r\n    }\r\n    if (this.canvas) {\r\n      var ctx = this.canvas.nativeElement.getContext('2d');\r\n      let filterString = \"\"\r\n      if (this.globalFilter.length > 0) {\r\n        filterString += this.globalFilter + \",\"\r\n      }\r\n      filterString += this.toolbarProps._datasetFilter;\r\n      let filteredData = this.neurasilDataFilter.transform(this.data, filterString);\r\n      this.hasData = (filteredData && filteredData.length > 0);\r\n      if (this.hasData) {\r\n        let o = this.neurasilChartsService.parseDataFromDatasource(this.toolbarProps.chartType, filteredData, this.toolbarProps.swapLabelsAndDatasets);\r\n        // console.log(\"o\",o)\r\n        let props = this.neurasilChartsService.chartObjectBuilder(this.toolbarProps.chartType, o.data, this.useAltAxis, this.chartTitle, this.yAxisLabelText, this.yAxisLabelText_Alt, this.xAxisLabelText, o._cornerstone, this.toolbarProps.swapLabelsAndDatasets, o._formatObject);\r\n        \r\n        if (this.toolbarProps.chartType == NEURASIL_CHART_TYPE.STACKED_PARETO) {\r\n          this.neurasilChartsService.performParetoAnalysis(props); // modify chart props object\r\n        }\r\n\r\n        let THIS = this;\r\n        //Cant put this in service, idk why\r\n        props.options.onClick = function (ev, element, chartObj) {\r\n          if (element[0]) {\r\n            let clickData = element[0];\r\n            let xAxisVal = props.data.labels[clickData.index];\r\n            let dataset = props.data.datasets[clickData.datasetIndex];\r\n            let datasetLabel = dataset.label;\r\n            let datasetVal = dataset.data[clickData.index];\r\n            let customDataObj = {\r\n              val: datasetVal,\r\n              dataLabel: THIS.swapLabelsAndDatasets ? datasetLabel : xAxisVal,\r\n              datasetLabel: THIS.swapLabelsAndDatasets ? xAxisVal : datasetLabel\r\n            }\r\n            let data = {\r\n              event: ev,\r\n              element: element,\r\n              chartInstance: chartObj,\r\n              data: customDataObj\r\n            }\r\n            THIS.dataOnClick.emit(data)\r\n          }\r\n        }\r\n        if (this.showDataLabels || isPrinting){\r\n          props.plugins.push(ChartDataLabels);\r\n        }\r\n        if (!props.options.plugins) {\r\n          props.options.plugins = {}\r\n        }\r\n        props.options.plugins.datalabels = {\r\n          formatter: function(value, context) {\r\n            //return Math.round(value*100) + '%';\r\n            if ((value > 0 && value > 0.001) || (value < 0 && value < -0.001)) {\r\n              return Math.round(value * 1000) / 1000;\r\n            } else {\r\n              return value;\r\n            }\r\n        }\r\n      }\r\n        // console.log(\"ctx\",ctx)\r\n        // console.log(\"props\",props)\r\n        this._canvas = new Chart(ctx, props);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NeurasilChartsToolbarComponent } from './neurasil-charts-toolbar/neurasil-charts-toolbar.component'\r\nimport { NeurasilChartsComponent } from './neurasil-charts.component';\r\nimport { NeurasilDataFilter } from './pipes/neurasil-data-filter/neurasil-data-filter.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NeurasilChartsComponent,\r\n    NeurasilChartsToolbarComponent,\r\n    NeurasilDataFilter\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  exports: [NeurasilChartsComponent,NeurasilDataFilter]\r\n})\r\nexport class NeurasilChartsModule { }\r\n","import { NEURASIL_CHART_TYPE } from './lib/models';\r\n\r\n/*\r\n * Public API Surface of neurasil-charts\r\n */\r\n\r\nexport * from './lib/neurasil-charts.service';\r\nexport * from './lib/neurasil-charts.component';\r\nexport * from './lib/neurasil-charts.module';\r\nexport * from './lib/pipes';\r\nexport {NEURASIL_CHART_TYPE} from './lib/models';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NeurasilChartsService","i2.NeurasilDataFilter"],"mappings":";;;;;;;;;AAAY,IAAA,oBAUX;AAVD,CAAA,UAAY,mBAAmB,EAAA;IAC3B,mBAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAO,CAAA;IACP,mBAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAY,CAAA;IACZ,mBAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAW,CAAA;IACX,mBAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAQ,CAAA;IACR,mBAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAO,CAAA;IACP,mBAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAS,CAAA;IACT,mBAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAQ,CAAA;IACR,mBAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAkB,CAAA;IAClB,mBAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAkB,CAAA;AACtB,CAAC,EAVW,mBAAmB,KAAnB,mBAAmB,GAU9B,EAAA,CAAA,CAAA;;MCJY,qBAAqB,CAAA;AAEhC,IAAA,WAAA,GAAA,GAAiB;AAGjB,IAAA,uBAAuB,CAAC,SAA8B,EAAE,YAAwB,EAAE,qBAA8B,EAAA;AAC9G,QAAA,IAAI,UAAU,GAAG;AACf,YAAA,YAAY,EAAE,EAAE;AAChB,YAAA,aAAa,EAAE,IAAI;AACnB,YAAA,IAAI,EAAE,IAAI;SACX,CAAA;AAED,QAAA,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;QAEpD,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAGtC,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,IAAI,IAAI,GAAG,EAAE,CAAC;AACd,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,YAAA,IAAI,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AACtB,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;AACnB,YAAA,KAAK,IAAI,CAAC,IAAI,IAAI,EAAE;AAClB,gBAAA,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;AACvC,aAAA;AACF,SAAA;;QAGD,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,IAAI,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,QAAA,UAAU,CAAC,YAAY,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAEvC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,YAAA,IAAI,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC3B,YAAA,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;AACxB,YAAA,IAAI,OAAO,IAAI,UAAU,CAAC,YAAY,EAAE;AACtC,gBAAA,IAAI,QAAQ,CAAC;AACb,gBAAA,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;oBAC3B,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;wBACpB,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC5B,MAAM;AACP,qBAAA;AACF,iBAAA;gBAED,IAAI,MAAM,GAAG,EAAE,CAAC;gBAChB,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,gBAAA,IAAI,QAAQ,EAAE;AACZ,oBAAA,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;wBACvB,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;4BAChC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAEhC,yBAAA;AAAM,6BAAA,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;4BAC5D,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC/C,yBAAA;AACF,qBAAA;AACF,iBAAA;gBAED,SAAS,CAAC,OAAO,CAAC,GAAG;AACnB,oBAAA,MAAM,EAAE,MAAM;AACd,oBAAA,MAAM,EAAE,MAAM;iBACf,CAAA;;AAGD,gBAAA,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;oBAC3B,IAAI,MAAM,IAAI,EAAE,EAAE;wBAChB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACzD,qBAAA;oBACD,IAAI,MAAM,IAAI,EAAE,EAAE;wBAChB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACzD,qBAAA;;;AAIF,iBAAA;AAEF,aAAA;AAAM,iBAAA,IAAI,OAAO,IAAI,UAAU,CAAC,YAAY,EAAE;gBAC7C,SAAS,CAAC,OAAO,CAAC,GAAG;AACnB,oBAAA,MAAM,EAAE,EAAE;AACV,oBAAA,MAAM,EAAE,EAAE;iBACX,CAAA;AACF,aAAA;AAEF,SAAA;QAGD,IAAI,CAAC,qBAAqB,EAAE;;;AAG3B,SAAA;AACI,aAAA;YACH,IAAI,QAAQ,GAAG,EAAE,CAAC;AAElB,YAAA,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtD,YAAA,IAAI,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;AAC/E,YAAA,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;AACd,gBAAA,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACpD,aAAA;AACD,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7D,gBAAA,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;gBAChD,KAAK,IAAI,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;AAC/C,oBAAA,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC/F,iBAAA;AACF,aAAA;;AAED,YAAA,IAAI,GAAG,QAAQ,CAAC;AACjB,SAAA;AAGD,QAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;;YAEnD,SAAS,CAAC,QAAQ,CAAC,GAAG;AACpB,gBAAA,MAAM,EAAE,EAAE;AACV,gBAAA,MAAM,EAAE,GAAG;aACZ,CAAA;YACD,SAAS,CAAC,UAAU,CAAC,GAAG;AACtB,gBAAA,MAAM,EAAE,EAAE;AACV,gBAAA,MAAM,EAAE,GAAG;aACZ,CAAA;AACF,SAAA;QAED,SAAS,QAAQ,CAAC,KAAsB,EAAA;AACtC,YAAA,QAAQ,CAAC,KAAK,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;SAC9D;AAED,QAAA,UAAU,CAAC,aAAa,GAAG,SAAS,CAAC;AACrC,QAAA,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;;AAEvB,QAAA,OAAO,UAAU,CAAC;KACnB;AAGD,IAAA,kBAAkB,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,KAAK,EAAE,cAAc,EAAE,kBAAkB,EAAE,cAAc,EAAE,WAAW,EAAE,qBAAqB,EAAE,YAAY,EAAA;AAC9J,QAAA,IAAI,CAAC,SAAS,IAAI,mBAAmB,CAAC,GAAG,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,IAAI,SAAS,IAAI,mBAAmB,CAAC,IAAI,IAAI,SAAS,IAAI,mBAAmB,CAAC,OAAO,IAAI,SAAS,IAAI,mBAAmB,CAAC,GAAG,IAAI,SAAS,IAAI,mBAAmB,CAAC,KAAK,KAAK,UAAU,IAAI,IAAI,EAAE;AAC1R,YAAA,OAAO,CAAC,IAAI,CAAC,yFAAyF,CAAC,CAAC;YACxG,UAAU,GAAG,KAAK,CAAC;AACpB,SAAA;AAED,QAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;YACnD,kBAAkB,GAAG,UAAU,CAAC;YAChC,UAAU,GAAG,IAAI,CAAC;AACnB,SAAA;AAED,QAAA,IAAI,OAAO,GAAQ;AACjB,YAAA,mBAAmB,EAAE,KAAK;AAC1B,YAAA,UAAU,EAAE,IAAI;SACjB,CAAC;AACF,QAAA,IAAI,KAAK,EAAE;YACT,OAAO,CAAC,KAAK,GAAG;AACd,gBAAA,OAAO,EAAE,IAAI;AACb,gBAAA,IAAI,EAAE,KAAK;aACZ,CAAA;AACF,SAAA;QAED,IAAI,UAAU,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,CAAA;AAC7C,QAAA,IAAI,cAAc,EAAE;AAClB,YAAA,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;AAC1B,YAAA,UAAU,CAAC,IAAI,GAAG,cAAc,CAAC;AAClC,SAAA;QAED,IAAI,cAAc,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,CAAA;AACjD,QAAA,IAAI,kBAAkB,EAAE;AACtB,YAAA,cAAc,CAAC,OAAO,GAAG,IAAI,CAAC;AAC9B,YAAA,cAAc,CAAC,IAAI,GAAG,kBAAkB,CAAC;AAC1C,SAAA;QAED,IAAI,UAAU,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AAChD,QAAA,IAAI,cAAc,EAAE;AAClB,YAAA,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;AAC1B,YAAA,UAAU,CAAC,IAAI,GAAG,cAAc,CAAC;AAClC,SAAA;AACI,aAAA;AACH,YAAA,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;YAC1B,UAAU,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC9B,SAAA;;QAED,IAAI,SAAS,IAAI,mBAAmB,CAAC,GAAG,IAAI,SAAS,IAAI,mBAAmB,CAAC,KAAK,EAAE;YAClF,IAAI,SAAS,IAAI,mBAAmB,CAAC,OAAO,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;gBAE/F,OAAO,CAAC,MAAM,GAAG;AACf,oBAAA,CAAC,EAAE;AACD,wBAAA,OAAO,EAAE,IAAI;AACb,wBAAA,KAAK,EAAE,UAAU;AAClB,qBAAA;AACD,oBAAA,KAAK,EAAE;AACL,wBAAA,IAAI,EAAC,QAAQ;AACb,wBAAA,QAAQ,EAAE,MAAM;AAChB,wBAAA,OAAO,EAAE,IAAI;AACb,wBAAA,KAAK,EAAE,UAAU;AAClB,qBAAA;iBACF,CAAA;AAED,gBAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;AAEnD,oBAAA,IAAI,UAAU,GAAQ;;AAEpB,wBAAA,IAAI,EAAC,QAAQ;AACb,wBAAA,QAAQ,EAAE,OAAO;AACjB,wBAAA,OAAO,EAAE,IAAI;AACb,wBAAA,WAAW,EAAE,IAAI;AACjB,wBAAA,KAAK,EAAC,EAAE;AACR,wBAAA,KAAK,EAAE,cAAc;qBACtB,CAAA;AACD,oBAAA,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;AACnB,oBAAA,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC;oBACrB,UAAU,CAAC,KAAK,GAAG;AACjB,wBAAA,QAAQ,EAAE,EAAE;qBACb,CAAA;AAED,oBAAA,OAAO,CAAC,MAAM,CAAC,YAAY,GAAE,UAAU,CAAC;AAEzC,iBAAA;AAEF,aAAA;AAAM,iBAAA;gBACL,OAAO,CAAC,MAAM,GAAG;AACf,oBAAA,CAAC,EAAE;AACD,wBAAA,KAAK,EAAE,UAAU;AAClB,qBAAA;AACD,oBAAA,KAAK,EAAE;AACL,wBAAA,WAAW,EAAE,IAAI;AACjB,wBAAA,KAAK,EAAE,UAAU;AAClB,qBAAA;iBACF,CAAA;AAED,gBAAA,IAAI,UAAU,EAAE;AACd,oBAAA,IAAI,UAAU,GAAQ;;AAEpB,wBAAA,OAAO,EAAE,IAAI;AACb,wBAAA,KAAK,EAAE;AACL,4BAAA,WAAW,EAAE,IAAI;AAClB,yBAAA;AACD,wBAAA,QAAQ,EAAE,OAAO;AACjB,wBAAA,IAAI,EAAC,QAAQ;AACb,wBAAA,KAAK,EAAE,cAAc;qBACtB,CAAA;;;;;;AAMD,oBAAA,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC;AAEvC,iBAAA;AACF,aAAA;AACF,SAAA;AAED,QAAA,IAAI,IAAI,CAAC;AACT,QAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,IAAI,EAAE;YACzC,IAAI,GAAG,MAAM,CAAA;AACd,SAAA;AAAM,aAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,GAAG;YAC7C,SAAS,IAAI,mBAAmB,CAAC,QAAQ;YACzC,SAAS,IAAI,mBAAmB,CAAC,OAAO;AACxC,YAAA,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;YACjD,IAAI,GAAG,KAAK,CAAA;AACb,SAAA;AAAM,aAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;YAC1D,IAAI,GAAG,KAAK,CAAA;AACb,SAAA;AAAM,aAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,GAAG,EAAE;YAC/C,IAAI,GAAG,KAAK,CAAA;AACb,SAAA;AACI,aAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,KAAK,EAAE;YAC/C,IAAI,GAAG,UAAU,CAAA;AAClB,SAAA;QAGD,IAAI,IAAI,GAAG,IAAI,CAAC;;AAGhB,QAAA,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;AACtB,QAAA,OAAO,CAAC,QAAQ,CAAC,SAAS,GAAG,EAAE,CAAC;AAEhC,QAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,GAAG;YACtC,SAAS,IAAI,mBAAmB,CAAC,QAAQ;YACzC,SAAS,IAAI,mBAAmB,CAAC,IAAI;YACrC,SAAS,IAAI,mBAAmB,CAAC,OAAO;AACxC,YAAA,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;YACjD,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,WAAW,EAAE,IAAI,EAAA;AAC5D,gBAAA,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;AAChE,gBAAA,IAAI,KAAK,EAAE;oBACT,KAAK,IAAI,IAAI,CAAC;AACf,iBAAA;AACD,gBAAA,IAAI,qBAAqB,EAAE;oBACzB,KAAK,IAAI,CAAG,EAAA,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAA,CAAE,GAAG,WAAW,CAAC,MAAM,GAAG,CAAG,EAAA,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAA,CAAE,CAAC;AAC3H,iBAAA;AAAM,qBAAA;oBAEL,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACxC,IAAI,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,GAAG,CAAC,CAAC,CAAA;AAC/C,oBAAA,IAAI,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;AAClC,oBAAA,KAAK,IAAI,CAAG,EAAA,SAAS,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,MAAM,GAAG,CAAG,EAAA,SAAS,CAAC,MAAM,EAAE,CAAC;oBAAA,CAAC;AAC9E,iBAAA;AACD,gBAAA,OAAO,KAAK,CAAC;AACf,aAAC,CAAA;AACF,SAAA;aAAM,IAAI,SAAS,IAAI,mBAAmB,CAAC,GAAG,IAAI,SAAS,IAAI,mBAAmB,CAAC,KAAK,EAAE;YACzF,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,WAAW,EAAE,IAAI,EAAA;gBAC5D,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC3C,gBAAA,IAAI,KAAK,EAAE;oBACT,KAAK,IAAI,IAAI,CAAC;AACf,iBAAA;AACD,gBAAA,IAAI,SAAS,CAAC;AACd,gBAAA,IAAI,qBAAqB,EAAE;AACzB,oBAAA,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AAE1D,iBAAA;AAAM,qBAAA;AACL,oBAAA,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC;AAEzE,iBAAA;gBACD,KAAK,IAAI,CAAG,EAAA,SAAS,CAAC,MAAM,CAAG,EAAA,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA,EAAG,SAAS,CAAC,MAAM,CAAA,CAAE,CAAC;AACpH,gBAAA,OAAO,KAAK,CAAC;AACf,aAAC,CAAA;YACD,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,WAAW,EAAE,IAAI,EAAA;AAC5D,gBAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;AAC1D,aAAC,CAAA;AACF,SAAA;AAAM,aAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;AAC1D,YAAA,OAAO,CAAC,SAAS,GAAG,GAAG,CAAC;YACxB,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,WAAW,EAAE,IAAI,EAAA;AAE5D,gBAAA,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;AAC1D,gBAAA,IAAI,KAAK,EAAE;oBACT,KAAK,IAAI,IAAI,CAAC;AACf,iBAAA;AACD,gBAAA,IAAI,SAAS,CAAC;AACd,gBAAA,IAAI,qBAAqB,EAAE;AACzB,oBAAA,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AAE1D,iBAAA;AAAM,qBAAA;AACL,oBAAA,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC;AAEzE,iBAAA;gBACD,KAAK,IAAI,CAAG,EAAA,SAAS,CAAC,MAAM,CAAG,EAAA,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA,EAAG,SAAS,CAAC,MAAM,CAAA,CAAE,CAAC;AACpH,gBAAA,OAAO,KAAK,CAAC;AACf,aAAC,CAAA;YACD,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,WAAW,EAAE,IAAI,EAAA;AAE5D,gBAAA,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AAC/B,aAAC,CAAA;AACF,SAAA;AAGD,QAAA,IAAI,UAAU,GAAG;AACf,YAAA,OAAO,EAAC,EAAE;AACV,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,qBAAqB,CAAC;AAC3F,YAAA,OAAO,EAAE,OAAO;SACjB,CAAA;AACD,QAAA,OAAO,UAAU,CAAC;KACnB;AAED,IAAA,UAAU,CAAC,SAAS,EAAE,UAAU,cAAc,SAAS,qBAAqB,WAAW,EAAE,qBAAqB,EAAA;;AAG5G,QAAA,SAAS,UAAU,CAAC,OAAO,EAAE,UAAU,EAAA;AACrC,YAAA,IAAI,MAAM,GAAG;AACX,gBAAA,CAAA,iBAAA,EAAoB,OAAO,CAAG,CAAA,CAAA;AAC9B,gBAAA,CAAA,iBAAA,EAAoB,OAAO,CAAG,CAAA,CAAA;AAC9B,gBAAA,CAAA,gBAAA,EAAmB,OAAO,CAAG,CAAA,CAAA;AAC7B,gBAAA,CAAA,gBAAA,EAAmB,OAAO,CAAG,CAAA,CAAA;AAC7B,gBAAA,CAAA,eAAA,EAAkB,OAAO,CAAG,CAAA,CAAA;AAC5B,gBAAA,CAAA,eAAA,EAAkB,OAAO,CAAG,CAAA,CAAA;AAC5B,gBAAA,CAAA,aAAA,EAAgB,OAAO,CAAG,CAAA,CAAA;AAC1B,gBAAA,CAAA,gBAAA,EAAmB,OAAO,CAAG,CAAA,CAAA;AAC7B,gBAAA,CAAA,gBAAA,EAAmB,OAAO,CAAG,CAAA,CAAA;AAC7B,gBAAA,CAAA,eAAA,EAAkB,OAAO,CAAG,CAAA,CAAA;AAC5B,gBAAA,CAAA,eAAA,EAAkB,OAAO,CAAG,CAAA,CAAA;AAC5B,gBAAA,CAAA,cAAA,EAAiB,OAAO,CAAG,CAAA,CAAA;AAC3B,gBAAA,CAAA,cAAA,EAAiB,OAAO,CAAG,CAAA,CAAA;aAC5B,CAAC;AAEF,YAAA,IAAI,UAAU,GAAG,MAAM,CAAC,MAAM,EAAE;AAC9B,gBAAA,IAAI,IAAI,GAAG,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC;AACtC,gBAAA,IAAI,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;AACjC,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE;oBAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;wBACrC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;wBACtB,CAAC,EAAE,CAAC;AACL,qBAAA;AACF,iBAAA;AACF,aAAA;AAED,YAAA,OAAO,MAAM,CAAC;SACf;AAED,QAAA,IAAI,YAAY,CAAC;AACjB,QAAA,IAAI,cAAc,CAAC;AACnB,QAAA,IAAI,oBAAoB,CAAC;QACzB,IAAI,CAAC,qBAAqB,EAAE;AAC1B,YAAA,YAAY,GAAG,UAAU,CAAC,CAAC,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAA;AAC3D,YAAA,cAAc,GAAG,UAAU,CAAC,GAAG,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAA;AAC/D,YAAA,oBAAoB,GAAG,UAAU,CAAC,GAAG,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAA;AACtE,SAAA;AAAM,aAAA;AACL,YAAA,YAAY,GAAG,UAAU,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAA;AAC3D,YAAA,cAAc,GAAG,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAA;AAC/D,YAAA,oBAAoB,GAAG,UAAU,CAAC,GAAG,EAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAA;AACvE,SAAA;QAID,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACzC,QAAA,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;AACd,YAAA,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAC1B,SAAA;AAGD,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAEvC,IAAI,KAAK,GAAG,OAAO,CAAC;AACpB,YAAA,IAAI,UAAU,EAAE;gBACd,IAAI,CAAC,GAAG,CAAC,EAAE;oBACT,KAAK,IAAI,MAAM,CAAC;AACjB,iBAAA;AACF,aAAA;;AAED,YAAA,IAAI,OAAO,GAAQ;AACjB,gBAAA,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;AACjB,gBAAA,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC3B,gBAAA,eAAe,EAAE,cAAc,CAAC,CAAC,CAAC;AAClC,gBAAA,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC;AAC5B,gBAAA,oBAAoB,EAAE,oBAAoB,CAAC,CAAC,CAAC;AAC7C,gBAAA,gBAAgB,EAAE,YAAY,CAAC,CAAC,CAAC;AACjC,gBAAA,WAAW,EAAE,CAAC;aACf,CAAC;;AAGF,YAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,QAAQ,EAAE;gBAC7C,IAAI,CAAC,IAAI,CAAC,EAAE;AACV,oBAAA,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC;AACtB,iBAAA;AAAM,qBAAA;AACL,oBAAA,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC;AACvB,iBAAA;AACF,aAAA;YAKD,IAAI,SAAS,IAAI,mBAAmB,CAAC,GAAG,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,IAAI,SAAS,IAAI,mBAAmB,CAAC,OAAO,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;AAC1L,gBAAA,OAAO,CAAC,eAAe,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AAC5C,gBAAA,OAAO,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACtC,gBAAA,OAAO,CAAC,oBAAoB,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;AACvD,gBAAA,OAAO,CAAC,gBAAgB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AAC5C,aAAA;iBAAM,IAAI,SAAS,IAAI,mBAAmB,CAAC,QAAQ,IAAI,SAAS,IAAI,mBAAmB,CAAC,IAAI,EAAE;AAC7F,gBAAA,IAAI,OAAO,CAAC,IAAI,IAAI,KAAK,EAAE;AACzB,oBAAA,OAAO,CAAC,eAAe,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AAC5C,oBAAA,OAAO,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACtC,oBAAA,OAAO,CAAC,oBAAoB,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;AACvD,oBAAA,OAAO,CAAC,gBAAgB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AAC5C,iBAAA;AAAM,qBAAA;AACL,oBAAA,OAAO,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACtC,oBAAA,OAAO,CAAC,eAAe,GAAG,eAAe,CAAC;AAC3C,iBAAA;AACF,aAAA;AAAM,iBAAA,IAAI,SAAS,IAAI,mBAAmB,CAAC,GAAG,IAAI,SAAS,IAAI,mBAAmB,CAAC,KAAK,EAAE;AACzF,gBAAA,OAAO,CAAC,eAAe,GAAG,cAAc,CAAC;AACzC,gBAAA,OAAO,CAAC,WAAW,GAAG,YAAY,CAAC;AACnC,gBAAA,OAAO,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;AACpD,gBAAA,OAAO,CAAC,gBAAgB,GAAG,YAAY,CAAC;AACzC,aAAA;YAGD,IAAI,SAAS,IAAI,mBAAmB,CAAC,GAAG,IAAI,SAAS,IAAI,mBAAmB,CAAC,KAAK,EAAE;gBAClF,IAAI,SAAS,IAAI,mBAAmB,CAAC,OAAO,IAAI,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;AAC/F,oBAAA,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;AACzB,iBAAA;AACF,aAAA;AAED,YAAA,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACxB,SAAA;AACD,QAAA,IAAI,UAAU,GAAG;AACf,YAAA,MAAM,EAAE,SAAS,CAAC,WAAW,CAAC;AAC9B,YAAA,QAAQ,EAAE,QAAQ;SACnB,CAAA;AACD,QAAA,OAAO,UAAU,CAAC;KACnB;AAED,IAAA,qBAAqB,CAAC,KAAK,EAAA;;QAEzB,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,IAAI,QAAQ,GAAG,CAAC,CAAC;;QAGjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3D,IAAI,GAAG,GAAG,CAAC,CAAC;AACZ,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnD,gBAAA,IAAI,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,gBAAA,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE;AACd,oBAAA,GAAG,GAAG,CAAC,CAAC;AACT,iBAAA;gBACD,GAAG,IAAI,GAAG,CAAA;AACX,aAAA;AACD,YAAA,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtB,QAAQ,IAAI,GAAG,CAAC;AACjB,SAAA;;AAGD,QAAA,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB;;;;;;;;;;;AAWE;AACF,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3C,YAAA,IAAI,CAAC,GAAG;AACN,gBAAA,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC;gBACnB,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aAC7B,CAAA;AACD,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnD,gBAAA,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvC,aAAA;AACD,YAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACf,SAAA;;AAGD,QAAA,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,EAAA;AACxB,YAAA,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;AAC7D,SAAC,CAAC,CAAC;;QAGH,IAAI,cAAc,GAAG,EAAE,CAAA;AACvB,QAAA,KAAK,IAAI,CAAC,GAAE,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACpC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC1C,SAAA;AACD,QAAA,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;;AAGnC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnD,IAAI,IAAI,GAAG,EAAE,CAAC;AACd,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBACrC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACxB,aAAA;YACD,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;AACpC,SAAA;;QAGD,IAAI,iBAAiB,GAAG,EAAE,CAAC;AAC3B,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAG,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACtC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACtC,SAAA;AAED,QAAA,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC1B,QAAA,IAAI,iBAAiB,GAAG,EAAE,CAAC;;AAG3B,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAG,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AACjD,YAAA,UAAU,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC;AACnC,YAAA,IAAI,SAAS,GAAG,UAAU,GAAC,QAAQ,GAAG,GAAG,CAAC;AAC1C,YAAA,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,GAAG,CAAE,CAAC;AAC3D,YAAA,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AAC3B,SAAA;;AAGD,QAAA,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;AACvB,YAAA,OAAO,EAAC,QAAQ;AAChB,YAAA,MAAM,EAAC,gBAAgB;AACvB,YAAA,iBAAiB,EAAC,eAAe;AACjC,YAAA,aAAa,EAAC,iBAAiB;AAC/B,YAAA,aAAa,EAAC,CAAC;AACf,YAAA,MAAM,EAAC,MAAM;AACb,YAAA,SAAS,EAAC,cAAc;AACxB,YAAA,YAAY,EAAE;AACZ,gBAAA,SAAS,EAAC,KAAK;AAChB,aAAA;AACD,YAAA,aAAa,EAAE,CAAC;AACjB,SAAA,CAAC,CAAA;;AAGF,QAAA,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;AACvB,YAAA,OAAO,EAAC,UAAU;AAClB,YAAA,MAAM,EAAC,iBAAiB;AACxB,YAAA,iBAAiB,EAAC,eAAe;AACjC,YAAA,aAAa,EAAC,iBAAiB;AAC/B,YAAA,aAAa,EAAC,CAAC;AACf,YAAA,MAAM,EAAC,MAAM;AACb,YAAA,SAAS,EAAC,cAAc;AACxB,YAAA,YAAY,EAAE;AACZ,gBAAA,SAAS,EAAC,KAAK;AAChB,aAAA;AACD,YAAA,aAAa,EAAE,CAAC;AACjB,SAAA,CAAC,CAAA;KACH;;6GAvkBU,qBAAqB,GAAA,CAAA,EAAA,CAAA;0GAArB,qBAAqB,EAAA,OAAA,EAArB,qBAAqB,CAAA,IAAA,EAAA,UAAA,EAFpB,MAAM,EAAA,CAAA,CAAA;;4EAEP,qBAAqB,EAAA,CAAA;kBAHjC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;iBACnB,CAAA;;;;MCCY,kBAAkB,CAAA;IAE7B,SAAS,CAAC,IAAW,EAAE,UAAkB,EAAA;QACvC,IAAI,UAAU,KAAK,EAAE,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,EAAE;AACxE,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AAAM,aAAA;AACL,YAAA,IAAI,UAAU,EAAE;gBACd,IAAI,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAI,YAAY,GAAG,EAAE,CAAC;gBACtB,IAAI,YAAY,GAAG,EAAE,CAAC;gBACtB,IAAI,cAAc,GAAG,EAAE,CAAC;gBACxB,IAAI,cAAc,GAAG,EAAE,CAAC;AACxB,gBAAA,KAAK,IAAI,CAAC,IAAI,WAAW,EAAE;oBACzB,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,SAAS,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AACtF,wBAAA,IAAI,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;AAC/C,wBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;AAClB,4BAAA,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AACjD,yBAAA;AAAM,6BAAA,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;AACzB,4BAAA,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;AAClB,gCAAA,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AACpD,6BAAA;AAAM,iCAAA;AACL,gCAAA,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAA;AAClD,6BAAA;AACF,yBAAA;AAAM,6BAAA;4BACL,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;AAC/B,yBAAA;AACF,qBAAA;AACF,iBAAA;AAGD,gBAAA,IAAI,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,QAAQ,EAAA;oBAChD,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAClC,IAAI,YAAY,GAAG,EAAE,CAAC;AACtB,oBAAA,KAAK,IAAI,CAAC,IAAI,KAAK,EAAE;AACnB,wBAAA,IAAI,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACvB,wBAAA,IAAI,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC9B,wBAAA,YAAY,IAAI,KAAK,GAAG,GAAG,CAAC;AAC7B,qBAAA;oBACD,YAAY,GAAG,YAAY,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;oBACjD,IAAI,oBAAoB,GAAG,KAAK,CAAC;AACjC,oBAAA,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3B,wBAAA,KAAK,IAAI,CAAC,IAAI,YAAY,EAAE;4BAC1B,IAAI,YAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;gCAC1C,oBAAoB,GAAG,IAAI,CAAC;gCAC5B,MAAM;AACP,6BAAA;AACF,yBAAA;AACF,qBAAA;AAAM,yBAAA;wBACL,oBAAoB,GAAG,IAAI,CAAC;AAC7B,qBAAA;AACD,oBAAA,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,oBAAoB,EAAE;AACnD,wBAAA,KAAK,IAAI,CAAC,IAAI,YAAY,EAAE;4BAC1B,IAAI,YAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;gCAC1C,oBAAoB,GAAG,KAAK,CAAC;gCAC7B,MAAM;AACP,6BAAA;AACF,yBAAA;AACF,qBAAA;AACD,oBAAA,IAAI,oBAAoB,EAAE;AAExB,wBAAA,OAAO,QAAQ,CAAC;AACjB,qBAAA;AACH,iBAAC,CAAC,CAAC;gBAEH,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;AAC1D,oBAAA,MAAM,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAA;AACjF,iBAAA;;AAEI,qBAAA,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;AAClC,oBAAA,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAA;;AAEzD,oBAAA,KAAK,IAAI,CAAC,IAAI,aAAa,EAAE;AAC3B,wBAAA,IAAI,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;wBAChC,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAElC,wBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,4BAAA,IAAI,CAAC,GAAG,CAAC,EAAE;AACT,gCAAA,KAAK,IAAI,CAAC,IAAI,cAAc,EAAE;AAC5B,oCAAA,IAAI,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;oCACjD,IAAI,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE;AAC5C,wCAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,qCAAA;AACF,iCAAA;AACF,6BAAA;AACF,yBAAA;AACF,qBAAA;AACF,iBAAA;AAEI,qBAAA,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;AAClC,oBAAA,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;AAC1D,oBAAA,KAAK,IAAI,CAAC,IAAI,aAAa,EAAE;AAC3B,wBAAA,IAAI,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;wBAChC,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAClC,wBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,4BAAA,IAAI,CAAC,GAAG,CAAC,EAAE;AACT,gCAAA,IAAI,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;gCACjD,IAAI,UAAU,GAAG,KAAK,CAAC;AACvB,gCAAA,KAAK,IAAI,CAAC,IAAI,cAAc,EAAE;oCAC5B,IAAI,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE;wCAC5C,UAAU,GAAG,IAAI,CAAC;AACnB,qCAAA;;;;AAIF,iCAAA;gCACD,IAAI,CAAC,UAAU,EAAE;AACf,oCAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,iCAAA;AACF,6BAAA;AACF,yBAAA;AACF,qBAAA;AACF,iBAAA;AAED,gBAAA,OAAO,aAAa,CAAC;AACtB,aAAA;YACD,OAAO,IAAI,CAAC;AACb,SAAA;KACF;;uGArHU,kBAAkB,GAAA,CAAA,EAAA,CAAA;4HAAlB,kBAAkB,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA;;4EAAlB,kBAAkB,EAAA,CAAA;kBAJ9B,IAAI;AAAC,YAAA,IAAA,EAAA,CAAA;AACJ,oBAAA,IAAI,EAAE,oBAAoB;AAC1B,oBAAA,IAAI,EAAE,IAAI;iBACX,CAAA;;;;MCIY,8BAA8B,CAAA;AAL3C,IAAA,WAAA,GAAA;AAOY,QAAA,IAAA,CAAA,kBAAkB,GAAG,IAAI,YAAY,EAAO,CAAC;AACvD,QAAA,IAAmB,CAAA,mBAAA,GAAG,mBAAmB,CAAC;KAK3C;AAJC,IAAA,mBAAmB,CAAC,EAAE,EAAA;;QAEpB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACjD;;+HAPU,8BAA8B,GAAA,CAAA,EAAA,CAAA;gHAA9B,8BAA8B,EAAA,SAAA,EAAA,CAAA,CAAA,yBAAA,CAAA,CAAA,EAAA,MAAA,EAAA,EAAA,YAAA,EAAA,cAAA,EAAA,EAAA,OAAA,EAAA,EAAA,kBAAA,EAAA,oBAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,mBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,0BAAA,EAAA,aAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,aAAA,EAAA,SAAA,EAAA,CAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,UAAA,EAAA,CAAA,EAAA,SAAA,EAAA,eAAA,EAAA,QAAA,CAAA,EAAA,CAAA,CAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,aAAA,CAAA,EAAA,CAAA,CAAA,EAAA,wBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,4BAAA,CAAA,EAAA,CAAA,CAAA,EAAA,0BAAA,CAAA,EAAA,CAAA,CAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,SAAA,EAAA,eAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,EAAA,OAAA,CAAA,EAAA,CAAA,CAAA,EAAA,aAAA,EAAA,KAAA,EAAA,eAAA,EAAA,MAAA,EAAA,cAAA,EAAA,KAAA,CAAA,EAAA,CAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,EAAA,CAAA,CAAA,EAAA,QAAA,EAAA,wBAAA,CAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,IAAA,EAAA,yBAAA,EAAA,CAAA,EAAA,SAAA,EAAA,eAAA,CAAA,EAAA,CAAA,CAAA,EAAA,QAAA,EAAA,OAAA,CAAA,CAAA,EAAA,QAAA,EAAA,SAAA,uCAAA,CAAA,EAAA,EAAA,GAAA,EAAA;QAAA,IAAA,EAAA,GAAA,CAAA,EAAA;ACT3C,YAAA,EAAgC,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,aAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA,CAAA,CAAA;AAGkE,YAAA,EAAyC,CAAA,UAAA,CAAA,eAAA,EAAA,SAAA,sEAAA,CAAA,MAAA,EAAA,EAAA,OAAA,GAAA,CAAA,YAAA,CAAA,cAAA,GAAA,MAAA,CAAA,EAAA,CAAA,CAAA,QAAA,EAAA,SAAA,+DAAA,CAAA,MAAA,EAAA,EAAA,OAAW,+BAA2B,CAAtC,EAAA,CAAA,CAAA;AAA/H,YAAA,EAAA,CAAA,YAAA,EAAuK,EAAA,CAAA;AAE3K,YAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAqD,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,CAAA;AACb,YAAA,EAChC,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,CAAA;YAAA,EAAyC,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA;AACzC,YAAA,EACA,CAAA,MAAA,CAAA,CAAA,EAAA,uEAAA,CAAA,CAAA;AAAA,YAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,IAAA,CAAI,CAAA,EAAA,EAAA,IAAA,CAAA,CAAA;AACJ,YAAA,EACA,CAAA,MAAA,CAAA,EAAA,EAAA,6DAAA,CAAA,CAAA;AAAA,YAAA,EAAA,CAAA,YAAA,EAAO,EAAA,EAAA,CAAA;YAIf,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA,CAAsC,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,CAAA,CAAA,CAAA;AAED,YAAA,EAAoC,CAAA,UAAA,CAAA,eAAA,EAAA,SAAA,wEAAA,CAAA,MAAA,EAAA,EAAA,OAAA,GAAA,CAAA,YAAA,CAAA,SAAA,GAAA,MAAA,CAAA,EAAA,CAAA,CAAA,eAAA,EAAA,SAAA,wEAAA,CAAA,MAAA,EAAA,EAAA,OAAkB,+BAA2B,CAA7C,EAAA,CAAA,CAAA;YAC7D,EAAkB,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,YAAA,EAAS,CAAA,MAAA,CAAA,EAAA,EAAA,WAAA,CAAA,CAAA;YAAA,EAAS,CAAA,YAAA,EAAA,CAAA;YACpC,EAAkB,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,YAAA,EAAc,CAAA,MAAA,CAAA,EAAA,EAAA,gBAAA,CAAA,CAAA;YAAA,EAAS,CAAA,YAAA,EAAA,CAAA;YACzC,EAAkB,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,YAAA,EAAiB,CAAA,MAAA,CAAA,EAAA,EAAA,mBAAA,CAAA,CAAA;YAAA,EAAS,CAAA,YAAA,EAAA,CAAA;YAC5C,EAAkB,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,YAAA,EAAU,CAAA,MAAA,CAAA,EAAA,EAAA,YAAA,CAAA,CAAA;YAAA,EAAS,CAAA,YAAA,EAAA,CAAA;YACrC,EAAkB,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,YAAA,EAAgB,CAAA,MAAA,CAAA,EAAA,EAAA,kBAAA,CAAA,CAAA;YAAA,EAAS,CAAA,YAAA,EAAA,CAAA;YAC3C,EAAkB,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,YAAA,EAAG,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAAA;YAAA,EAAS,CAAA,YAAA,EAAA,CAAA;YAC9B,EAAkB,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,YAAA,EAAK,CAAA,MAAA,CAAA,EAAA,EAAA,OAAA,CAAA,CAAA;YAAA,EAAS,CAAA,YAAA,EAAA,CAAA;YAEhC,EAAkB,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,YAAA,EAAe,CAAA,MAAA,CAAA,EAAA,EAAA,iBAAA,CAAA,CAAA;YAAA,EAAS,CAAA,YAAA,EAAA,CAAA;YAC1C,EAAkB,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,YAAA,EAAS,CAAA,MAAA,CAAA,EAAA,EAAA,WAAA,CAAA,CAAA;AAAA,YAAA,EAAA,CAAA,YAAA,EAAS,EAAA,EAAA,CAAA;AAI5C,YAAA,EAAyB,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA,CAAA,CAAA;AAIwC,YAAA,EAAgD,CAAA,UAAA,CAAA,eAAA,EAAA,SAAA,uEAAA,CAAA,MAAA,EAAA,EAAA,OAAA,GAAA,CAAA,YAAA,CAAA,qBAAA,GAAA,MAAA,CAAA,EAAA,CAAA,CAAA,eAAA,EAAA,SAAA,uEAAA,CAAA,MAAA,EAAA,EAAA,OAAkB,+BAA2B,CAA7C,EAAA,CAAA,CAAA;YAArG,EAAoJ,CAAA,YAAA,EAAA,CAAA;YAChJ,EAAkC,CAAA,SAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,CAAA;YAClC,EAAyC,CAAA,cAAA,CAAA,EAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA;AACrC,YAAA,EACJ,CAAA,MAAA,CAAA,EAAA,EAAA,4BAAA,CAAA,CAAA;YAAA,EAAA,CAAA,YAAA,EAAO,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;;;AApC+D,YAAA,EAAyC,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;YAAzC,EAAyC,CAAA,UAAA,CAAA,SAAA,EAAA,GAAA,CAAA,YAAA,CAAA,cAAA,CAAA,CAAA;AAc9F,YAAA,EAAoC,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA;YAApC,EAAoC,CAAA,UAAA,CAAA,SAAA,EAAA,GAAA,CAAA,YAAA,CAAA,SAAA,CAAA,CAAA;AAkBJ,YAAA,EAAgD,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA;YAAhD,EAAgD,CAAA,UAAA,CAAA,SAAA,EAAA,GAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,CAAA;;;;4ED1BhH,8BAA8B,EAAA,CAAA;kBAL1C,SAAS;+BACE,yBAAyB,EAAA,QAAA,EAAA,ojFAAA,EAAA,MAAA,EAAA,CAAA,ilDAAA,CAAA,EAAA,CAAA;oBAK1B,YAAY,EAAA,CAAA;sBAApB,KAAK;gBACI,kBAAkB,EAAA,CAAA;sBAA3B,MAAM;;;;;;;;AETL,QAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAiD,CAAA,CAAA,EAAA,yBAAA,EAAA,CAAA,CAAA,CAAA;AACpB,QAAA,EAAA,CAAA,UAAA,CAAA,oBAAA,EAAA,SAAA,4FAAA,CAAA,MAAA,EAAA,EAAA,EAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,EAAA,CAAA,aAAA,EAAA,CAAA,CAAA,OAAA,EAAA,CAAA,WAAA,CAAA,MAAA,CAAA,YAAA,GAAA,MAAA,CAAA,CAAA,EAAA,CAA+B,CAAuB,oBAAA,EAAA,SAAA,4FAAA,CAAA,MAAA,IAAA,EAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,CAAA,MAAA,MAAA,GAAA,EAAA,CAAA,aAAA,EAAA,CAAA,CAAA,OAAA,EAAA,CAAA,WAAA,CAAA,MAA0B,CAAA,kBAAA,CAAA,MAAA,CAAA,CAAA,CAAjD,EAAA,CAAA,CAAA;AAAmD,QAAA,EAAA,CAAA,YAAA,EAA0B,EAAA,CAAA;;;;AAA5G,QAAA,EAA+B,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;QAA/B,EAA+B,CAAA,UAAA,CAAA,cAAA,EAAA,MAAA,CAAA,YAAA,CAAA,CAAA;;;;;AAIxD,QAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAsC,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,CAAA;AAE9B,QAAA,EACJ,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,QAAA,EAAA,CAAA,YAAA,EAAM,EAAA,CAAA;;;;AADF,QAAA,EACJ,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;QADI,EACJ,CAAA,kBAAA,CAAA,GAAA,EAAA,MAAA,CAAA,aAAA,EAAA,GAAA,CAAA,CAAA;;;ACLZ,KAAK,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,CAAA;MAcnB,uBAAuB,CAAA;IAqDlC,WAAmB,CAAA,qBAA4C,EAAS,kBAAsC,EAAA;AAA3F,QAAA,IAAqB,CAAA,qBAAA,GAArB,qBAAqB,CAAuB;AAAS,QAAA,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;;AA9CrG,QAAA,IAAW,CAAA,WAAA,GAAY,IAAI,CAAC;;AAE5B,QAAA,IAAS,CAAA,SAAA,GAAwB,IAAI,CAAC;;AAEtC,QAAA,IAAA,CAAA,UAAU,GAAY,IAAI,CAAC;;AAE3B,QAAA,IAAU,CAAA,UAAA,GAAW,EAAE,CAAC;;AAExB,QAAA,IAAc,CAAA,cAAA,GAAW,EAAE,CAAC;;AAE5B,QAAA,IAAc,CAAA,cAAA,GAAW,EAAE,CAAC;;AAE5B,QAAA,IAAkB,CAAA,kBAAA,GAAW,EAAE,CAAC;;AAMhC,QAAA,IAAY,CAAA,YAAA,GAAW,EAAE,CAAC;AACnC;;AAEE;AACO,QAAA,IAAc,CAAA,cAAA,GAAY,KAAK,CAAC;AAEhC,QAAA,IAAa,CAAA,aAAA,GAAW,yCAAyC,CAAC;;AAGjE,QAAA,IAAA,CAAA,eAAe,GAAG,IAAI,YAAY,EAAE,CAAC;;AAErC,QAAA,IAAA,CAAA,iBAAiB,GAAG,IAAI,YAAY,EAAE,CAAC;;AAEvC,QAAA,IAAA,CAAA,2BAA2B,GAAG,IAAI,YAAY,EAAE,CAAC;;AAEjD,QAAA,IAAA,CAAA,WAAW,GAAG,IAAI,YAAY,EAAE,CAAC;;QAG3C,IAAA,CAAA,YAAY,GAAG;AACb,YAAA,SAAS,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,mBAAmB,CAAC,GAAG;AACpE,YAAA,cAAc,EAAE,EAAE;AAClB,YAAA,qBAAqB,EAAE,KAAK;SAC7B,CAAC;KAMiH;IAEnH,QAAQ,GAAA;QACN,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAC9C,SAAA;QAED,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC9B,IAAI,CAAC,YAAY,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAA;AACrE,SAAA;AAED,QAAA,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KACpD;IACD,eAAe,GAAA;QACb,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;AACD,IAAA,WAAW,CAAC,OAAsB,EAAA;AAChC,QAAA,IAAI,OAAO,EAAE;;YAEX,IAAI,CAAC,SAAS,EAAE,CAAC;AAClB,SAAA;KACF;AAED,IAAA,aAAa,CAAC,KAAK,EAAA;;KAGlB;AAED,IAAA,YAAY,CAAC,KAAK,EAAA;;KAEjB;AACD,IAAA,kBAAkB,CAAC,EAAE,EAAA;QAEnB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QACvD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9C,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAA;QAC9E,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;IAGD,SAAS,CAAC,aAAoB,KAAK,EAAA;QACjC,IAAI,IAAI,CAAC,OAAO,EAAE;AAChB,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;AACxB,SAAA;QACD,IAAI,IAAI,CAAC,MAAM,EAAE;AACf,YAAA,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACrD,IAAI,YAAY,GAAG,EAAE,CAAA;AACrB,YAAA,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;AAChC,gBAAA,YAAY,IAAI,IAAI,CAAC,YAAY,GAAG,GAAG,CAAA;AACxC,aAAA;AACD,YAAA,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;AACjD,YAAA,IAAI,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AAC9E,YAAA,IAAI,CAAC,OAAO,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACzD,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,IAAI,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;;gBAE/I,IAAI,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC;gBAE9Q,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,IAAI,mBAAmB,CAAC,cAAc,EAAE;oBACrE,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;AACzD,iBAAA;gBAED,IAAI,IAAI,GAAG,IAAI,CAAC;;gBAEhB,KAAK,CAAC,OAAO,CAAC,OAAO,GAAG,UAAU,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAA;AACrD,oBAAA,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;AACd,wBAAA,IAAI,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AAC3B,wBAAA,IAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAClD,wBAAA,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AAC1D,wBAAA,IAAI,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC;wBACjC,IAAI,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC/C,wBAAA,IAAI,aAAa,GAAG;AAClB,4BAAA,GAAG,EAAE,UAAU;4BACf,SAAS,EAAE,IAAI,CAAC,qBAAqB,GAAG,YAAY,GAAG,QAAQ;4BAC/D,YAAY,EAAE,IAAI,CAAC,qBAAqB,GAAG,QAAQ,GAAG,YAAY;yBACnE,CAAA;AACD,wBAAA,IAAI,IAAI,GAAG;AACT,4BAAA,KAAK,EAAE,EAAE;AACT,4BAAA,OAAO,EAAE,OAAO;AAChB,4BAAA,aAAa,EAAE,QAAQ;AACvB,4BAAA,IAAI,EAAE,aAAa;yBACpB,CAAA;AACD,wBAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAC5B,qBAAA;AACH,iBAAC,CAAA;AACD,gBAAA,IAAI,IAAI,CAAC,cAAc,IAAI,UAAU,EAAC;AACpC,oBAAA,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AACrC,iBAAA;AACD,gBAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE;AAC1B,oBAAA,KAAK,CAAC,OAAO,CAAC,OAAO,GAAG,EAAE,CAAA;AAC3B,iBAAA;AACD,gBAAA,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,GAAG;AACjC,oBAAA,SAAS,EAAE,UAAS,KAAK,EAAE,OAAO,EAAA;;wBAEhC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,KAAK,MAAM,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;4BACjE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;AACxC,yBAAA;AAAM,6BAAA;AACL,4BAAA,OAAO,KAAK,CAAC;AACd,yBAAA;qBACJ;iBACF,CAAA;;;gBAGC,IAAI,CAAC,OAAO,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACtC,aAAA;AACF,SAAA;KACF;;iHA/JU,uBAAuB,EAAA,EAAA,CAAA,iBAAA,CAAAA,qBAAA,CAAA,EAAA,EAAA,CAAA,iBAAA,CAAAC,kBAAA,CAAA,CAAA,CAAA,EAAA,CAAA;yGAAvB,uBAAuB,EAAA,SAAA,EAAA,CAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,SAAA,EAAA,SAAA,6BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;QAAA,IAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;YAAvB,EAAA,CAAA,UAAA,CAAA,aAAA,EAAA,SAAA,sDAAA,CAAA,MAAA,EAAA,EAAA,OAAA,GAAA,CAAA,aAAA,CAAA,MAAA,CAAqB,8HAArB,GAAoB,CAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,eAAA,CAAA,CAAA;AAFpB,SAAA;AAAA,KAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,WAAA,EAAA,aAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,oBAAA,EAAA,qBAAA,EAAA,uBAAA,EAAA,YAAA,EAAA,cAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,eAAA,EAAA,EAAA,OAAA,EAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA,2BAAA,EAAA,6BAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,kBAAA,CAAA,CAAC,kBAAkB,CAAC,CAAA,EAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,mBAAA,CAAA,EAAA,CAAA,OAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,IAAA,EAAA,qBAAA,EAAA,CAAA,EAAA,SAAA,CAAA,EAAA,CAAA,qBAAA,EAAA,EAAA,CAAA,EAAA,CAAA,OAAA,EAAA,SAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,cAAA,EAAA,oBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,kBAAA,CAAA,CAAA,EAAA,QAAA,EAAA,SAAA,gCAAA,CAAA,EAAA,EAAA,GAAA,EAAA;QAAA,IAAA,EAAA,GAAA,CAAA,EAAA;YDhBjC,EAA+B,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,CAAA;AAC3B,YAAA,EAEM,CAAA,UAAA,CAAA,CAAA,EAAA,sCAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,CAAA;YACN,EAA4B,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,CAAA;YACxB,EAA0G,CAAA,SAAA,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAC1G,YAAA,EAIM,CAAA,UAAA,CAAA,CAAA,EAAA,sCAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,CAAA;AACV,YAAA,EAAA,CAAA,YAAA,EAAM,EAAA,CAAA;;;AAVwB,YAAA,EAAiB,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;YAAjB,EAAiB,CAAA,UAAA,CAAA,MAAA,EAAA,GAAA,CAAA,WAAA,CAAA,CAAA;AAInC,YAAA,EAA0C,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;AAA1C,YAAA,EAA0C,CAAA,UAAA,CAAA,SAAA,EAAA,GAAA,CAAA,OAAA,GAAA,EAAA,GAAA,eAAA,CAAA,CAAA;AAC5B,YAAA,EAAc,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;YAAd,EAAc,CAAA,UAAA,CAAA,MAAA,EAAA,CAAA,GAAA,CAAA,OAAA,CAAA,CAAA;;;;4ECY/B,uBAAuB,EAAA,CAAA;kBANnC,SAAS;+BACE,iBAAiB,EAAA,SAAA,EAGhB,CAAC,kBAAkB,CAAC,EAAA,QAAA,EAAA,snBAAA,EAAA,MAAA,EAAA,CAAA,gbAAA,CAAA,EAAA,CAAA;uGAIsB,MAAM,EAAA,CAAA;sBAA1D,SAAS;gBAAC,IAAA,EAAA,CAAA,qBAAqB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAA;gBAG1C,IAAI,EAAA,CAAA;sBAAZ,KAAK;gBAEG,WAAW,EAAA,CAAA;sBAAnB,KAAK;gBAEG,SAAS,EAAA,CAAA;sBAAjB,KAAK;gBAEG,UAAU,EAAA,CAAA;sBAAlB,KAAK;gBAEG,UAAU,EAAA,CAAA;sBAAlB,KAAK;gBAEG,cAAc,EAAA,CAAA;sBAAtB,KAAK;gBAEG,cAAc,EAAA,CAAA;sBAAtB,KAAK;gBAEG,kBAAkB,EAAA,CAAA;sBAA1B,KAAK;gBAIG,qBAAqB,EAAA,CAAA;sBAA7B,KAAK;gBAEG,YAAY,EAAA,CAAA;sBAApB,KAAK;gBAIG,cAAc,EAAA,CAAA;sBAAtB,KAAK;gBAEG,aAAa,EAAA,CAAA;sBAArB,KAAK;gBAGI,eAAe,EAAA,CAAA;sBAAxB,MAAM;gBAEG,iBAAiB,EAAA,CAAA;sBAA1B,MAAM;gBAEG,2BAA2B,EAAA,CAAA;sBAApC,MAAM;gBAEG,WAAW,EAAA,CAAA;sBAApB,MAAM;gBAoCP,aAAa,EAAA,CAAA;sBADZ,YAAY;uBAAC,oBAAoB,EAAE,CAAC,QAAQ,CAAC,CAAA;gBAM9C,YAAY,EAAA,CAAA;sBADX,YAAY;uBAAC,mBAAmB,EAAE,CAAC,QAAQ,CAAC,CAAA;;;;MChFlC,oBAAoB,CAAA;;2GAApB,oBAAoB,GAAA,CAAA,EAAA,CAAA;qGAApB,oBAAoB,EAAA,CAAA,CAAA;yGAL7B,YAAY;QACZ,WAAW,CAAA,EAAA,CAAA,CAAA;;4EAIF,oBAAoB,EAAA,CAAA;kBAZhC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,YAAY,EAAE;wBACZ,uBAAuB;wBACvB,8BAA8B;wBAC9B,kBAAkB;AACnB,qBAAA;AACD,oBAAA,OAAO,EAAE;wBACP,YAAY;wBACZ,WAAW;AACZ,qBAAA;AACD,oBAAA,OAAO,EAAE,CAAC,uBAAuB,EAAC,kBAAkB,CAAC;iBACtD,CAAA;;;AACY,CAAA,YAAA;AAAA,IAAA,CAAA,OAAA,SAAA,KAAA,WAAA,IAAA,SAAA,KAAA,EAAA,CAAA,kBAAA,CAAA,oBAAoB,mBAV7B,uBAAuB;YACvB,8BAA8B;AAC9B,YAAA,kBAAkB,aAGlB,YAAY;YACZ,WAAW,CAAA,EAAA,OAAA,EAAA,CAEH,uBAAuB,EAAC,kBAAkB,CAAA,EAAA,CAAA,CAAA;AAAA,CAAA,GAAA;;ACftD;;AAEG;;ACJH;;AAEG;;;;"}